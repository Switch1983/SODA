#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UrbanWater")]
	public partial class SQLAzureDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDemandPredictionData(DemandPredictionData instance);
    partial void UpdateDemandPredictionData(DemandPredictionData instance);
    partial void DeleteDemandPredictionData(DemandPredictionData instance);
    partial void InsertWaterTreatmentPlant(WaterTreatmentPlant instance);
    partial void UpdateWaterTreatmentPlant(WaterTreatmentPlant instance);
    partial void DeleteWaterTreatmentPlant(WaterTreatmentPlant instance);
    partial void InsertNearestNeighbourIndex(NearestNeighbourIndex instance);
    partial void UpdateNearestNeighbourIndex(NearestNeighbourIndex instance);
    partial void DeleteNearestNeighbourIndex(NearestNeighbourIndex instance);
    partial void InsertPricingData(PricingData instance);
    partial void UpdatePricingData(PricingData instance);
    partial void DeletePricingData(PricingData instance);
    partial void InsertUnitOfMeasure(UnitOfMeasure instance);
    partial void UpdateUnitOfMeasure(UnitOfMeasure instance);
    partial void DeleteUnitOfMeasure(UnitOfMeasure instance);
    partial void InsertWeatherData(WeatherData instance);
    partial void UpdateWeatherData(WeatherData instance);
    partial void DeleteWeatherData(WeatherData instance);
    partial void InsertWeatherForecastData(WeatherForecastData instance);
    partial void UpdateWeatherForecastData(WeatherForecastData instance);
    partial void DeleteWeatherForecastData(WeatherForecastData instance);
    partial void InsertWeatherStation(WeatherStation instance);
    partial void UpdateWeatherStation(WeatherStation instance);
    partial void DeleteWeatherStation(WeatherStation instance);
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertContainer(Container instance);
    partial void UpdateContainer(Container instance);
    partial void DeleteContainer(Container instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertUtility(Utility instance);
    partial void UpdateUtility(Utility instance);
    partial void DeleteUtility(Utility instance);
    partial void InsertAvailabilityPredictionData(AvailabilityPredictionData instance);
    partial void UpdateAvailabilityPredictionData(AvailabilityPredictionData instance);
    partial void DeleteAvailabilityPredictionData(AvailabilityPredictionData instance);
    partial void InsertBorehole(Borehole instance);
    partial void UpdateBorehole(Borehole instance);
    partial void DeleteBorehole(Borehole instance);
    partial void InsertConsumptionCharacterizationData(ConsumptionCharacterizationData instance);
    partial void UpdateConsumptionCharacterizationData(ConsumptionCharacterizationData instance);
    partial void DeleteConsumptionCharacterizationData(ConsumptionCharacterizationData instance);
    partial void InsertDMA(DMA instance);
    partial void UpdateDMA(DMA instance);
    partial void DeleteDMA(DMA instance);
    partial void InsertDMALeakageData(DMALeakageData instance);
    partial void UpdateDMALeakageData(DMALeakageData instance);
    partial void DeleteDMALeakageData(DMALeakageData instance);
    partial void InsertPipe(Pipe instance);
    partial void UpdatePipe(Pipe instance);
    partial void DeletePipe(Pipe instance);
    partial void InsertPumpStation(PumpStation instance);
    partial void UpdatePumpStation(PumpStation instance);
    partial void DeletePumpStation(PumpStation instance);
    partial void InsertReservoir(Reservoir instance);
    partial void UpdateReservoir(Reservoir instance);
    partial void DeleteReservoir(Reservoir instance);
    partial void InsertReservoirData(ReservoirData instance);
    partial void UpdateReservoirData(ReservoirData instance);
    partial void DeleteReservoirData(ReservoirData instance);
    partial void InsertTank(Tank instance);
    partial void UpdateTank(Tank instance);
    partial void DeleteTank(Tank instance);
    partial void InsertTankData(TankData instance);
    partial void UpdateTankData(TankData instance);
    partial void DeleteTankData(TankData instance);
    partial void InsertVariableType(VariableType instance);
    partial void UpdateVariableType(VariableType instance);
    partial void DeleteVariableType(VariableType instance);
    partial void InsertSite(Site instance);
    partial void UpdateSite(Site instance);
    partial void DeleteSite(Site instance);
    partial void InsertDMAData(DMAData instance);
    partial void UpdateDMAData(DMAData instance);
    partial void DeleteDMAData(DMAData instance);
    partial void InsertMeter(Meter instance);
    partial void UpdateMeter(Meter instance);
    partial void DeleteMeter(Meter instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    #endregion
		
		public SQLAzureDataContext() : 
				base(global::DataAccess.Properties.Settings.Default.UrbanWaterConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SQLAzureDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLAzureDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLAzureDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLAzureDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DemandPredictionData> DemandPredictionDatas
		{
			get
			{
				return this.GetTable<DemandPredictionData>();
			}
		}
		
		public System.Data.Linq.Table<WaterTreatmentPlant> WaterTreatmentPlants
		{
			get
			{
				return this.GetTable<WaterTreatmentPlant>();
			}
		}
		
		public System.Data.Linq.Table<NearestNeighbourIndex> NearestNeighbourIndexes
		{
			get
			{
				return this.GetTable<NearestNeighbourIndex>();
			}
		}
		
		public System.Data.Linq.Table<PricingData> PricingDatas
		{
			get
			{
				return this.GetTable<PricingData>();
			}
		}
		
		public System.Data.Linq.Table<UnitOfMeasure> UnitOfMeasures
		{
			get
			{
				return this.GetTable<UnitOfMeasure>();
			}
		}
		
		public System.Data.Linq.Table<WeatherData> WeatherDatas
		{
			get
			{
				return this.GetTable<WeatherData>();
			}
		}
		
		public System.Data.Linq.Table<WeatherForecastData> WeatherForecastDatas
		{
			get
			{
				return this.GetTable<WeatherForecastData>();
			}
		}
		
		public System.Data.Linq.Table<WeatherStation> WeatherStations
		{
			get
			{
				return this.GetTable<WeatherStation>();
			}
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<Container> Containers
		{
			get
			{
				return this.GetTable<Container>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<Utility> Utilities
		{
			get
			{
				return this.GetTable<Utility>();
			}
		}
		
		public System.Data.Linq.Table<AvailabilityPredictionData> AvailabilityPredictionDatas
		{
			get
			{
				return this.GetTable<AvailabilityPredictionData>();
			}
		}
		
		public System.Data.Linq.Table<Borehole> Boreholes
		{
			get
			{
				return this.GetTable<Borehole>();
			}
		}
		
		public System.Data.Linq.Table<ConsumptionCharacterizationData> ConsumptionCharacterizationDatas
		{
			get
			{
				return this.GetTable<ConsumptionCharacterizationData>();
			}
		}
		
		public System.Data.Linq.Table<DMA> DMAs
		{
			get
			{
				return this.GetTable<DMA>();
			}
		}
		
		public System.Data.Linq.Table<DMALeakageData> DMALeakageDatas
		{
			get
			{
				return this.GetTable<DMALeakageData>();
			}
		}
		
		public System.Data.Linq.Table<Pipe> Pipes
		{
			get
			{
				return this.GetTable<Pipe>();
			}
		}
		
		public System.Data.Linq.Table<PumpStation> PumpStations
		{
			get
			{
				return this.GetTable<PumpStation>();
			}
		}
		
		public System.Data.Linq.Table<Reservoir> Reservoirs
		{
			get
			{
				return this.GetTable<Reservoir>();
			}
		}
		
		public System.Data.Linq.Table<ReservoirData> ReservoirDatas
		{
			get
			{
				return this.GetTable<ReservoirData>();
			}
		}
		
		public System.Data.Linq.Table<Tank> Tanks
		{
			get
			{
				return this.GetTable<Tank>();
			}
		}
		
		public System.Data.Linq.Table<TankData> TankDatas
		{
			get
			{
				return this.GetTable<TankData>();
			}
		}
		
		public System.Data.Linq.Table<VariableType> VariableTypes
		{
			get
			{
				return this.GetTable<VariableType>();
			}
		}
		
		public System.Data.Linq.Table<Site> Sites
		{
			get
			{
				return this.GetTable<Site>();
			}
		}
		
		public System.Data.Linq.Table<DMAData> DMADatas
		{
			get
			{
				return this.GetTable<DMAData>();
			}
		}
		
		public System.Data.Linq.Table<Meter> Meters
		{
			get
			{
				return this.GetTable<Meter>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.WeatherDataGet")]
		public ISingleResult<WeatherDataGetResult> WeatherDataGet([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="NVarChar(MAX)")] string elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDateTime", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> startDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDateTime", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> endDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, startDateTime, endDateTime);
			return ((ISingleResult<WeatherDataGetResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Topology.InsertTankData")]
		public int InsertTankData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TankIdentity", DbType="NVarChar(MAX)")] string tankIdentity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="From", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> from, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="To", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> to, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Volume", DbType="Float")] System.Nullable<double> volume, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Outflow", DbType="Float")] System.Nullable<double> outflow, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Inflow", DbType="Float")] System.Nullable<double> inflow)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tankIdentity, from, to, volume, outflow, inflow);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.WeatherDataGet_Full")]
		public ISingleResult<WeatherDataGet_FullResult> WeatherDataGet_Full([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="NVarChar(MAX)")] string elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDateTime", DbType="DateTime")] System.Nullable<System.DateTime> startDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDateTime", DbType="DateTime")] System.Nullable<System.DateTime> endDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, startDateTime, endDateTime);
			return ((ISingleResult<WeatherDataGet_FullResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.WeatherDataGet_Hour")]
		public ISingleResult<WeatherDataGet_HourResult> WeatherDataGet_Hour([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="NVarChar(MAX)")] string elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDateTime", DbType="DateTime")] System.Nullable<System.DateTime> startDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDateTime", DbType="DateTime")] System.Nullable<System.DateTime> endDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, startDateTime, endDateTime);
			return ((ISingleResult<WeatherDataGet_HourResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestDemandPrediction")]
		public ISingleResult<FindNearestDemandPredictionResult> FindNearestDemandPrediction([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestDemandPredictionResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestDMAflow")]
		public ISingleResult<FindNearestDMAflowResult> FindNearestDMAflow([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestDMAflowResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestDMApressure")]
		public ISingleResult<FindNearestDMApressureResult> FindNearestDMApressure([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestDMApressureResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestDMAvolume")]
		public ISingleResult<FindNearestDMAvolumeResult> FindNearestDMAvolume([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestDMAvolumeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherForecastHumidity")]
		public ISingleResult<FindNearestWeatherForecastHumidityResult> FindNearestWeatherForecastHumidity([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherForecastHumidityResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherForecastPrecipitation")]
		public ISingleResult<FindNearestWeatherForecastPrecipitationResult> FindNearestWeatherForecastPrecipitation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherForecastPrecipitationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherForecastPressure")]
		public ISingleResult<FindNearestWeatherForecastPressureResult> FindNearestWeatherForecastPressure([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherForecastPressureResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherForecastSolarRadiation")]
		public ISingleResult<FindNearestWeatherForecastSolarRadiationResult> FindNearestWeatherForecastSolarRadiation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherForecastSolarRadiationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherForecastTemperature")]
		public ISingleResult<FindNearestWeatherForecastTemperatureResult> FindNearestWeatherForecastTemperature([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherForecastTemperatureResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherForecastWindDirection")]
		public ISingleResult<FindNearestWeatherForecastWindDirectionResult> FindNearestWeatherForecastWindDirection([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherForecastWindDirectionResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherForecastWindVelocity")]
		public ISingleResult<FindNearestWeatherForecastWindVelocityResult> FindNearestWeatherForecastWindVelocity([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherForecastWindVelocityResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherHumidity")]
		public ISingleResult<FindNearestWeatherHumidityResult> FindNearestWeatherHumidity([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherHumidityResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherPrecipitation")]
		public ISingleResult<FindNearestWeatherPrecipitationResult> FindNearestWeatherPrecipitation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherPrecipitationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherPressure")]
		public ISingleResult<FindNearestWeatherPressureResult> FindNearestWeatherPressure([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherPressureResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherSolarRadiation")]
		public ISingleResult<FindNearestWeatherSolarRadiationResult> FindNearestWeatherSolarRadiation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherSolarRadiationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherTemperature")]
		public ISingleResult<FindNearestWeatherTemperatureResult> FindNearestWeatherTemperature([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherTemperatureResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherWindDirection")]
		public ISingleResult<FindNearestWeatherWindDirectionResult> FindNearestWeatherWindDirection([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherWindDirectionResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.FindNearestWeatherWindVelocity")]
		public ISingleResult<FindNearestWeatherWindVelocityResult> FindNearestWeatherWindVelocity([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ElementId", DbType="Int")] System.Nullable<int> elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfNearest", DbType="Int")] System.Nullable<int> numberOfNearest, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> mu, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> ve, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceRegressor", DbType="Float")] System.Nullable<double> sourceRegressor, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> inputDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId, numberOfNearest, mu, ve, sourceRegressor, inputDateTime);
			return ((ISingleResult<FindNearestWeatherWindVelocityResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demand.GetDemandPredictionData")]
		public ISingleResult<GetDemandPredictionDataResult> GetDemandPredictionData([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> startDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> endDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string elementId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDateTime, endDateTime, elementId);
			return ((ISingleResult<GetDemandPredictionDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Economics.GetPricingData")]
		public ISingleResult<GetPricingDataResult> GetPricingData([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> startDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> endDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string elementId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CreationDateTime", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> creationDateTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDateTime, endDateTime, elementId, creationDateTime);
			return ((ISingleResult<GetPricingDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Meteorological.GetWeatherData")]
		public ISingleResult<GetWeatherDataResult> GetWeatherData([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> startDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> endDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string elementId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDateTime, endDateTime, elementId);
			return ((ISingleResult<GetWeatherDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Meteorological.GetWeatherPredictionData")]
		public ISingleResult<GetWeatherPredictionDataResult> GetWeatherPredictionData([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> startDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> endDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string elementId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDateTime, endDateTime, elementId);
			return ((ISingleResult<GetWeatherPredictionDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Meteorological.InsertWeatherData")]
		public int InsertWeatherData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WeatherStationIdentity", DbType="NVarChar(MAX)")] string weatherStationIdentity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="From", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> from, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="To", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> to, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Precipitation", DbType="Float")] System.Nullable<double> precipitation, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Temperature", DbType="Float")] System.Nullable<double> temperature, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Humidity", DbType="Int")] System.Nullable<int> humidity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pressure", DbType="Int")] System.Nullable<int> pressure, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Wind_velocity", DbType="Float")] System.Nullable<double> wind_velocity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Wind_direction", DbType="NVarChar(MAX)")] string wind_direction, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Solar_radiation", DbType="Float")] System.Nullable<double> solar_radiation)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), weatherStationIdentity, from, to, precipitation, temperature, humidity, pressure, wind_velocity, wind_direction, solar_radiation);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Meteorological.InsertWeatherForecastData")]
		public int InsertWeatherForecastData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WeatherStationIdentity", DbType="NVarChar(MAX)")] string weatherStationIdentity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="From", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> from, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="To", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> to, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Precipitation", DbType="Float")] System.Nullable<double> precipitation, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Temperature", DbType="Float")] System.Nullable<double> temperature, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Humidity", DbType="Int")] System.Nullable<int> humidity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pressure", DbType="Int")] System.Nullable<int> pressure, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Wind_velocity", DbType="Float")] System.Nullable<double> wind_velocity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Wind_direction", DbType="NVarChar(MAX)")] string wind_direction, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Solar_radiation", DbType="Float")] System.Nullable<double> solar_radiation, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BaseTime", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> baseTime, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CreationTime", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> creationTime, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="NVarChar(MAX)")] string comment, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneratedById", DbType="NVarChar(MAX)")] string generatedById)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), weatherStationIdentity, from, to, precipitation, temperature, humidity, pressure, wind_velocity, wind_direction, solar_radiation, baseTime, creationTime, comment, generatedById);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Topology.GetAvailabilityPredictionData")]
		public ISingleResult<GetAvailabilityPredictionDataResult> GetAvailabilityPredictionData([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> startDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> endDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string elementId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDateTime, endDateTime, elementId);
			return ((ISingleResult<GetAvailabilityPredictionDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Topology.GetDICMSite")]
		public ISingleResult<GetDICMSiteResult> GetDICMSite([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> startDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> endDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string elementId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDateTime, endDateTime, elementId);
			return ((ISingleResult<GetDICMSiteResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Topology.GetDMAData")]
		public ISingleResult<GetDMADataResult> GetDMAData([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> startDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> endDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string elementId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDateTime, endDateTime, elementId);
			return ((ISingleResult<GetDMADataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Topology.GetmeterList")]
		public ISingleResult<GetmeterListResult> GetmeterList([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string elementId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), elementId);
			return ((ISingleResult<GetmeterListResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Topology.GetTankData")]
		public ISingleResult<GetTankDataResult> GetTankData([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> startDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> endDateTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string elementId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDateTime, endDateTime, elementId);
			return ((ISingleResult<GetTankDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Topology.InsertDMAData")]
		public int InsertDMAData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DMAIdentity", DbType="NVarChar(MAX)")] string dMAIdentity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Time", DbType="DateTimeOffset")] System.Nullable<System.DateTimeOffset> time, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Flow", DbType="Float")] System.Nullable<double> flow, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Volume", DbType="Float")] System.Nullable<double> volume, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pressure", DbType="Float")] System.Nullable<double> pressure)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dMAIdentity, time, flow, volume, pressure);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Demand.DemandPredictionData")]
	public partial class DemandPredictionData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DMAId;
		
		private System.DateTimeOffset _BaseTime;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private double _Demand;
		
		private System.Nullable<double> _Uncertainty;
		
		private string _Comment;
		
		private int _GeneratedById;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<DMA> _DMA;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDMAIdChanging(int value);
    partial void OnDMAIdChanged();
    partial void OnBaseTimeChanging(System.DateTimeOffset value);
    partial void OnBaseTimeChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnFromChanging(System.DateTimeOffset value);
    partial void OnFromChanged();
    partial void OnToChanging(System.DateTimeOffset value);
    partial void OnToChanged();
    partial void OnDemandChanging(double value);
    partial void OnDemandChanged();
    partial void OnUncertaintyChanging(System.Nullable<double> value);
    partial void OnUncertaintyChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnGeneratedByIdChanging(int value);
    partial void OnGeneratedByIdChanged();
    #endregion
		
		public DemandPredictionData()
		{
			this._Application = default(EntityRef<Application>);
			this._DMA = default(EntityRef<DMA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DMAId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DMAId
		{
			get
			{
				return this._DMAId;
			}
			set
			{
				if ((this._DMAId != value))
				{
					if (this._DMA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDMAIdChanging(value);
					this.SendPropertyChanging();
					this._DMAId = value;
					this.SendPropertyChanged("DMAId");
					this.OnDMAIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseTime", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset BaseTime
		{
			get
			{
				return this._BaseTime;
			}
			set
			{
				if ((this._BaseTime != value))
				{
					this.OnBaseTimeChanging(value);
					this.SendPropertyChanging();
					this._BaseTime = value;
					this.SendPropertyChanged("BaseTime");
					this.OnBaseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Demand", DbType="Float NOT NULL")]
		public double Demand
		{
			get
			{
				return this._Demand;
			}
			set
			{
				if ((this._Demand != value))
				{
					this.OnDemandChanging(value);
					this.SendPropertyChanging();
					this._Demand = value;
					this.SendPropertyChanged("Demand");
					this.OnDemandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uncertainty", DbType="Float")]
		public System.Nullable<double> Uncertainty
		{
			get
			{
				return this._Uncertainty;
			}
			set
			{
				if ((this._Uncertainty != value))
				{
					this.OnUncertaintyChanging(value);
					this.SendPropertyChanging();
					this._Uncertainty = value;
					this.SendPropertyChanged("Uncertainty");
					this.OnUncertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratedById", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GeneratedById
		{
			get
			{
				return this._GeneratedById;
			}
			set
			{
				if ((this._GeneratedById != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratedByIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratedById = value;
					this.SendPropertyChanged("GeneratedById");
					this.OnGeneratedByIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_DemandPredictionData", Storage="_Application", ThisKey="GeneratedById", OtherKey="Id", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.DemandPredictionDatas.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.DemandPredictionDatas.Add(this);
						this._GeneratedById = value.Id;
					}
					else
					{
						this._GeneratedById = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_DemandPredictionData", Storage="_DMA", ThisKey="DMAId", OtherKey="Id", IsForeignKey=true)]
		public DMA DMA
		{
			get
			{
				return this._DMA.Entity;
			}
			set
			{
				DMA previousValue = this._DMA.Entity;
				if (((previousValue != value) 
							|| (this._DMA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DMA.Entity = null;
						previousValue.DemandPredictionDatas.Remove(this);
					}
					this._DMA.Entity = value;
					if ((value != null))
					{
						value.DemandPredictionDatas.Add(this);
						this._DMAId = value.Id;
					}
					else
					{
						this._DMAId = default(int);
					}
					this.SendPropertyChanged("DMA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.WaterTreatmentPlant")]
	public partial class WaterTreatmentPlant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Identifier;
		
		private int _SiteId;
		
		private string _Description;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public WaterTreatmentPlant()
		{
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteId", DbType="Int NOT NULL")]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_WaterTreatmentPlant", Storage="_Site", ThisKey="SiteId", OtherKey="Id", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.WaterTreatmentPlants.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.WaterTreatmentPlants.Add(this);
						this._SiteId = value.Id;
					}
					else
					{
						this._SiteId = default(int);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Demand.NearestNeighbourIndex")]
	public partial class NearestNeighbourIndex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Index;
		
		private string _Description;
		
		private int _interval_max;
		
		private int _interval_min;
		
		private double _input_max;
		
		private double _input_min;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void Oninterval_maxChanging(int value);
    partial void Oninterval_maxChanged();
    partial void Oninterval_minChanging(int value);
    partial void Oninterval_minChanged();
    partial void Oninput_maxChanging(double value);
    partial void Oninput_maxChanged();
    partial void Oninput_minChanging(double value);
    partial void Oninput_minChanged();
    #endregion
		
		public NearestNeighbourIndex()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interval_max", DbType="Int NOT NULL")]
		public int interval_max
		{
			get
			{
				return this._interval_max;
			}
			set
			{
				if ((this._interval_max != value))
				{
					this.Oninterval_maxChanging(value);
					this.SendPropertyChanging();
					this._interval_max = value;
					this.SendPropertyChanged("interval_max");
					this.Oninterval_maxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interval_min", DbType="Int NOT NULL")]
		public int interval_min
		{
			get
			{
				return this._interval_min;
			}
			set
			{
				if ((this._interval_min != value))
				{
					this.Oninterval_minChanging(value);
					this.SendPropertyChanging();
					this._interval_min = value;
					this.SendPropertyChanged("interval_min");
					this.Oninterval_minChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_input_max", DbType="Float NOT NULL")]
		public double input_max
		{
			get
			{
				return this._input_max;
			}
			set
			{
				if ((this._input_max != value))
				{
					this.Oninput_maxChanging(value);
					this.SendPropertyChanging();
					this._input_max = value;
					this.SendPropertyChanged("input_max");
					this.Oninput_maxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_input_min", DbType="Float NOT NULL")]
		public double input_min
		{
			get
			{
				return this._input_min;
			}
			set
			{
				if ((this._input_min != value))
				{
					this.Oninput_minChanging(value);
					this.SendPropertyChanging();
					this._input_min = value;
					this.SendPropertyChanged("input_min");
					this.Oninput_minChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Economics.PricingData")]
	public partial class PricingData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.DateTimeOffset _CreationTime;
		
		private string _Comment;
		
		private System.DateTimeOffset _BaseTime;
		
		private decimal _Price;
		
		private int _GeneratedById;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<DMA> _DMA;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnFromChanging(System.DateTimeOffset value);
    partial void OnFromChanged();
    partial void OnToChanging(System.DateTimeOffset value);
    partial void OnToChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnBaseTimeChanging(System.DateTimeOffset value);
    partial void OnBaseTimeChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnGeneratedByIdChanging(int value);
    partial void OnGeneratedByIdChanged();
    #endregion
		
		public PricingData()
		{
			this._Application = default(EntityRef<Application>);
			this._DMA = default(EntityRef<DMA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._DMA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseTime", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset BaseTime
		{
			get
			{
				return this._BaseTime;
			}
			set
			{
				if ((this._BaseTime != value))
				{
					this.OnBaseTimeChanging(value);
					this.SendPropertyChanging();
					this._BaseTime = value;
					this.SendPropertyChanged("BaseTime");
					this.OnBaseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratedById", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GeneratedById
		{
			get
			{
				return this._GeneratedById;
			}
			set
			{
				if ((this._GeneratedById != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratedByIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratedById = value;
					this.SendPropertyChanged("GeneratedById");
					this.OnGeneratedByIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_PricingData", Storage="_Application", ThisKey="GeneratedById", OtherKey="Id", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.PricingDatas.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.PricingDatas.Add(this);
						this._GeneratedById = value.Id;
					}
					else
					{
						this._GeneratedById = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_PricingData", Storage="_DMA", ThisKey="LocationId", OtherKey="Id", IsForeignKey=true)]
		public DMA DMA
		{
			get
			{
				return this._DMA.Entity;
			}
			set
			{
				DMA previousValue = this._DMA.Entity;
				if (((previousValue != value) 
							|| (this._DMA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DMA.Entity = null;
						previousValue.PricingDatas.Remove(this);
					}
					this._DMA.Entity = value;
					if ((value != null))
					{
						value.PricingDatas.Add(this);
						this._LocationId = value.Id;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("DMA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Meteorological.UnitOfMeasure")]
	public partial class UnitOfMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private long _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitChanging(long value);
    partial void OnUnitChanged();
    #endregion
		
		public UnitOfMeasure()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="BigInt NOT NULL")]
		public long Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Meteorological.WeatherData")]
	public partial class WeatherData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Precipitation;
		
		private System.Nullable<double> _Temperature;
		
		private System.Nullable<int> _Humidity;
		
		private System.Nullable<int> _Pressure;
		
		private System.Nullable<double> _Wind_velocity;
		
		private string _Wind_direction;
		
		private System.Nullable<double> _Solar_radiation;
		
		private EntityRef<WeatherStation> _WeatherStation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWeatherStationIdChanging(int value);
    partial void OnWeatherStationIdChanged();
    partial void OnFromChanging(System.DateTimeOffset value);
    partial void OnFromChanged();
    partial void OnToChanging(System.DateTimeOffset value);
    partial void OnToChanged();
    partial void OnPrecipitationChanging(System.Nullable<double> value);
    partial void OnPrecipitationChanged();
    partial void OnTemperatureChanging(System.Nullable<double> value);
    partial void OnTemperatureChanged();
    partial void OnHumidityChanging(System.Nullable<int> value);
    partial void OnHumidityChanged();
    partial void OnPressureChanging(System.Nullable<int> value);
    partial void OnPressureChanged();
    partial void OnWind_velocityChanging(System.Nullable<double> value);
    partial void OnWind_velocityChanged();
    partial void OnWind_directionChanging(string value);
    partial void OnWind_directionChanged();
    partial void OnSolar_radiationChanging(System.Nullable<double> value);
    partial void OnSolar_radiationChanged();
    #endregion
		
		public WeatherData()
		{
			this._WeatherStation = default(EntityRef<WeatherStation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					if (this._WeatherStation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWeatherStationIdChanging(value);
					this.SendPropertyChanging();
					this._WeatherStationId = value;
					this.SendPropertyChanged("WeatherStationId");
					this.OnWeatherStationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precipitation", DbType="Float")]
		public System.Nullable<double> Precipitation
		{
			get
			{
				return this._Precipitation;
			}
			set
			{
				if ((this._Precipitation != value))
				{
					this.OnPrecipitationChanging(value);
					this.SendPropertyChanging();
					this._Precipitation = value;
					this.SendPropertyChanged("Precipitation");
					this.OnPrecipitationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Float")]
		public System.Nullable<double> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Int")]
		public System.Nullable<int> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this.OnHumidityChanging(value);
					this.SendPropertyChanging();
					this._Humidity = value;
					this.SendPropertyChanged("Humidity");
					this.OnHumidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pressure", DbType="Int")]
		public System.Nullable<int> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_velocity", DbType="Float")]
		public System.Nullable<double> Wind_velocity
		{
			get
			{
				return this._Wind_velocity;
			}
			set
			{
				if ((this._Wind_velocity != value))
				{
					this.OnWind_velocityChanging(value);
					this.SendPropertyChanging();
					this._Wind_velocity = value;
					this.SendPropertyChanged("Wind_velocity");
					this.OnWind_velocityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_direction", DbType="NVarChar(MAX)")]
		public string Wind_direction
		{
			get
			{
				return this._Wind_direction;
			}
			set
			{
				if ((this._Wind_direction != value))
				{
					this.OnWind_directionChanging(value);
					this.SendPropertyChanging();
					this._Wind_direction = value;
					this.SendPropertyChanged("Wind_direction");
					this.OnWind_directionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solar_radiation", DbType="Float")]
		public System.Nullable<double> Solar_radiation
		{
			get
			{
				return this._Solar_radiation;
			}
			set
			{
				if ((this._Solar_radiation != value))
				{
					this.OnSolar_radiationChanging(value);
					this.SendPropertyChanging();
					this._Solar_radiation = value;
					this.SendPropertyChanged("Solar_radiation");
					this.OnSolar_radiationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeatherStation_WeatherData", Storage="_WeatherStation", ThisKey="WeatherStationId", OtherKey="Id", IsForeignKey=true)]
		public WeatherStation WeatherStation
		{
			get
			{
				return this._WeatherStation.Entity;
			}
			set
			{
				WeatherStation previousValue = this._WeatherStation.Entity;
				if (((previousValue != value) 
							|| (this._WeatherStation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeatherStation.Entity = null;
						previousValue.WeatherDatas.Remove(this);
					}
					this._WeatherStation.Entity = value;
					if ((value != null))
					{
						value.WeatherDatas.Add(this);
						this._WeatherStationId = value.Id;
					}
					else
					{
						this._WeatherStationId = default(int);
					}
					this.SendPropertyChanged("WeatherStation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Meteorological.WeatherForecastData")]
	public partial class WeatherForecastData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Precipitation;
		
		private System.Nullable<double> _Temperature;
		
		private System.Nullable<int> _Humidity;
		
		private System.Nullable<int> _Pressure;
		
		private System.Nullable<double> _Wind_velocity;
		
		private string _Wind_direction;
		
		private System.Nullable<double> _Solar_radiation;
		
		private System.DateTimeOffset _BaseTime;
		
		private System.DateTimeOffset _CreationTime;
		
		private string _Comment;
		
		private int _GeneratedById;
		
		private EntityRef<WeatherStation> _WeatherStation;
		
		private EntityRef<Application> _Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWeatherStationIdChanging(int value);
    partial void OnWeatherStationIdChanged();
    partial void OnFromChanging(System.DateTimeOffset value);
    partial void OnFromChanged();
    partial void OnToChanging(System.DateTimeOffset value);
    partial void OnToChanged();
    partial void OnPrecipitationChanging(System.Nullable<double> value);
    partial void OnPrecipitationChanged();
    partial void OnTemperatureChanging(System.Nullable<double> value);
    partial void OnTemperatureChanged();
    partial void OnHumidityChanging(System.Nullable<int> value);
    partial void OnHumidityChanged();
    partial void OnPressureChanging(System.Nullable<int> value);
    partial void OnPressureChanged();
    partial void OnWind_velocityChanging(System.Nullable<double> value);
    partial void OnWind_velocityChanged();
    partial void OnWind_directionChanging(string value);
    partial void OnWind_directionChanged();
    partial void OnSolar_radiationChanging(System.Nullable<double> value);
    partial void OnSolar_radiationChanged();
    partial void OnBaseTimeChanging(System.DateTimeOffset value);
    partial void OnBaseTimeChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnGeneratedByIdChanging(int value);
    partial void OnGeneratedByIdChanged();
    #endregion
		
		public WeatherForecastData()
		{
			this._WeatherStation = default(EntityRef<WeatherStation>);
			this._Application = default(EntityRef<Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					if (this._WeatherStation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWeatherStationIdChanging(value);
					this.SendPropertyChanging();
					this._WeatherStationId = value;
					this.SendPropertyChanged("WeatherStationId");
					this.OnWeatherStationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precipitation", DbType="Float")]
		public System.Nullable<double> Precipitation
		{
			get
			{
				return this._Precipitation;
			}
			set
			{
				if ((this._Precipitation != value))
				{
					this.OnPrecipitationChanging(value);
					this.SendPropertyChanging();
					this._Precipitation = value;
					this.SendPropertyChanged("Precipitation");
					this.OnPrecipitationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Float")]
		public System.Nullable<double> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Int")]
		public System.Nullable<int> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this.OnHumidityChanging(value);
					this.SendPropertyChanging();
					this._Humidity = value;
					this.SendPropertyChanged("Humidity");
					this.OnHumidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pressure", DbType="Int")]
		public System.Nullable<int> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_velocity", DbType="Float")]
		public System.Nullable<double> Wind_velocity
		{
			get
			{
				return this._Wind_velocity;
			}
			set
			{
				if ((this._Wind_velocity != value))
				{
					this.OnWind_velocityChanging(value);
					this.SendPropertyChanging();
					this._Wind_velocity = value;
					this.SendPropertyChanged("Wind_velocity");
					this.OnWind_velocityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_direction", DbType="NVarChar(MAX)")]
		public string Wind_direction
		{
			get
			{
				return this._Wind_direction;
			}
			set
			{
				if ((this._Wind_direction != value))
				{
					this.OnWind_directionChanging(value);
					this.SendPropertyChanging();
					this._Wind_direction = value;
					this.SendPropertyChanged("Wind_direction");
					this.OnWind_directionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solar_radiation", DbType="Float")]
		public System.Nullable<double> Solar_radiation
		{
			get
			{
				return this._Solar_radiation;
			}
			set
			{
				if ((this._Solar_radiation != value))
				{
					this.OnSolar_radiationChanging(value);
					this.SendPropertyChanging();
					this._Solar_radiation = value;
					this.SendPropertyChanged("Solar_radiation");
					this.OnSolar_radiationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseTime", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset BaseTime
		{
			get
			{
				return this._BaseTime;
			}
			set
			{
				if ((this._BaseTime != value))
				{
					this.OnBaseTimeChanging(value);
					this.SendPropertyChanging();
					this._BaseTime = value;
					this.SendPropertyChanged("BaseTime");
					this.OnBaseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratedById", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GeneratedById
		{
			get
			{
				return this._GeneratedById;
			}
			set
			{
				if ((this._GeneratedById != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratedByIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratedById = value;
					this.SendPropertyChanged("GeneratedById");
					this.OnGeneratedByIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeatherStation_WeatherForecastData", Storage="_WeatherStation", ThisKey="WeatherStationId", OtherKey="Id", IsForeignKey=true)]
		public WeatherStation WeatherStation
		{
			get
			{
				return this._WeatherStation.Entity;
			}
			set
			{
				WeatherStation previousValue = this._WeatherStation.Entity;
				if (((previousValue != value) 
							|| (this._WeatherStation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeatherStation.Entity = null;
						previousValue.WeatherForecastDatas.Remove(this);
					}
					this._WeatherStation.Entity = value;
					if ((value != null))
					{
						value.WeatherForecastDatas.Add(this);
						this._WeatherStationId = value.Id;
					}
					else
					{
						this._WeatherStationId = default(int);
					}
					this.SendPropertyChanged("WeatherStation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_WeatherForecastData", Storage="_Application", ThisKey="GeneratedById", OtherKey="Id", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.WeatherForecastDatas.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.WeatherForecastDatas.Add(this);
						this._GeneratedById = value.Id;
					}
					else
					{
						this._GeneratedById = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Meteorological.WeatherStation")]
	public partial class WeatherStation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Identifier;
		
		private string _Description;
		
		private EntitySet<WeatherData> _WeatherDatas;
		
		private EntitySet<WeatherForecastData> _WeatherForecastDatas;
		
		private EntitySet<DMA> _DMAs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public WeatherStation()
		{
			this._WeatherDatas = new EntitySet<WeatherData>(new Action<WeatherData>(this.attach_WeatherDatas), new Action<WeatherData>(this.detach_WeatherDatas));
			this._WeatherForecastDatas = new EntitySet<WeatherForecastData>(new Action<WeatherForecastData>(this.attach_WeatherForecastDatas), new Action<WeatherForecastData>(this.detach_WeatherForecastDatas));
			this._DMAs = new EntitySet<DMA>(new Action<DMA>(this.attach_DMAs), new Action<DMA>(this.detach_DMAs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeatherStation_WeatherData", Storage="_WeatherDatas", ThisKey="Id", OtherKey="WeatherStationId")]
		public EntitySet<WeatherData> WeatherDatas
		{
			get
			{
				return this._WeatherDatas;
			}
			set
			{
				this._WeatherDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeatherStation_WeatherForecastData", Storage="_WeatherForecastDatas", ThisKey="Id", OtherKey="WeatherStationId")]
		public EntitySet<WeatherForecastData> WeatherForecastDatas
		{
			get
			{
				return this._WeatherForecastDatas;
			}
			set
			{
				this._WeatherForecastDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeatherStation_DMA", Storage="_DMAs", ThisKey="Id", OtherKey="WeatherStationId")]
		public EntitySet<DMA> DMAs
		{
			get
			{
				return this._DMAs;
			}
			set
			{
				this._DMAs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WeatherDatas(WeatherData entity)
		{
			this.SendPropertyChanging();
			entity.WeatherStation = this;
		}
		
		private void detach_WeatherDatas(WeatherData entity)
		{
			this.SendPropertyChanging();
			entity.WeatherStation = null;
		}
		
		private void attach_WeatherForecastDatas(WeatherForecastData entity)
		{
			this.SendPropertyChanging();
			entity.WeatherStation = this;
		}
		
		private void detach_WeatherForecastDatas(WeatherForecastData entity)
		{
			this.SendPropertyChanging();
			entity.WeatherStation = null;
		}
		
		private void attach_DMAs(DMA entity)
		{
			this.SendPropertyChanging();
			entity.WeatherStation = this;
		}
		
		private void detach_DMAs(DMA entity)
		{
			this.SendPropertyChanging();
			entity.WeatherStation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Service.Application")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Identifier;
		
		private EntitySet<DemandPredictionData> _DemandPredictionDatas;
		
		private EntitySet<PricingData> _PricingDatas;
		
		private EntitySet<WeatherForecastData> _WeatherForecastDatas;
		
		private EntitySet<AvailabilityPredictionData> _AvailabilityPredictionDatas;
		
		private EntitySet<DMALeakageData> _DMALeakageDatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    #endregion
		
		public Application()
		{
			this._DemandPredictionDatas = new EntitySet<DemandPredictionData>(new Action<DemandPredictionData>(this.attach_DemandPredictionDatas), new Action<DemandPredictionData>(this.detach_DemandPredictionDatas));
			this._PricingDatas = new EntitySet<PricingData>(new Action<PricingData>(this.attach_PricingDatas), new Action<PricingData>(this.detach_PricingDatas));
			this._WeatherForecastDatas = new EntitySet<WeatherForecastData>(new Action<WeatherForecastData>(this.attach_WeatherForecastDatas), new Action<WeatherForecastData>(this.detach_WeatherForecastDatas));
			this._AvailabilityPredictionDatas = new EntitySet<AvailabilityPredictionData>(new Action<AvailabilityPredictionData>(this.attach_AvailabilityPredictionDatas), new Action<AvailabilityPredictionData>(this.detach_AvailabilityPredictionDatas));
			this._DMALeakageDatas = new EntitySet<DMALeakageData>(new Action<DMALeakageData>(this.attach_DMALeakageDatas), new Action<DMALeakageData>(this.detach_DMALeakageDatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_DemandPredictionData", Storage="_DemandPredictionDatas", ThisKey="Id", OtherKey="GeneratedById")]
		public EntitySet<DemandPredictionData> DemandPredictionDatas
		{
			get
			{
				return this._DemandPredictionDatas;
			}
			set
			{
				this._DemandPredictionDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_PricingData", Storage="_PricingDatas", ThisKey="Id", OtherKey="GeneratedById")]
		public EntitySet<PricingData> PricingDatas
		{
			get
			{
				return this._PricingDatas;
			}
			set
			{
				this._PricingDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_WeatherForecastData", Storage="_WeatherForecastDatas", ThisKey="Id", OtherKey="GeneratedById")]
		public EntitySet<WeatherForecastData> WeatherForecastDatas
		{
			get
			{
				return this._WeatherForecastDatas;
			}
			set
			{
				this._WeatherForecastDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_AvailabilityPredictionData", Storage="_AvailabilityPredictionDatas", ThisKey="Id", OtherKey="GeneratedById")]
		public EntitySet<AvailabilityPredictionData> AvailabilityPredictionDatas
		{
			get
			{
				return this._AvailabilityPredictionDatas;
			}
			set
			{
				this._AvailabilityPredictionDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_DMALeakageData", Storage="_DMALeakageDatas", ThisKey="Id", OtherKey="GeneratedById")]
		public EntitySet<DMALeakageData> DMALeakageDatas
		{
			get
			{
				return this._DMALeakageDatas;
			}
			set
			{
				this._DMALeakageDatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DemandPredictionDatas(DemandPredictionData entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_DemandPredictionDatas(DemandPredictionData entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_PricingDatas(PricingData entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_PricingDatas(PricingData entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_WeatherForecastDatas(WeatherForecastData entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_WeatherForecastDatas(WeatherForecastData entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_AvailabilityPredictionDatas(AvailabilityPredictionData entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_AvailabilityPredictionDatas(AvailabilityPredictionData entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_DMALeakageDatas(DMALeakageData entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_DMALeakageDatas(DMALeakageData entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Service.Containers")]
	public partial class Container : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FileContainers;
		
		private bool _Active;
		
		private string _Description;
		
		private EntitySet<Site> _Sites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFileContainersChanging(string value);
    partial void OnFileContainersChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Container()
		{
			this._Sites = new EntitySet<Site>(new Action<Site>(this.attach_Sites), new Action<Site>(this.detach_Sites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileContainers", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FileContainers
		{
			get
			{
				return this._FileContainers;
			}
			set
			{
				if ((this._FileContainers != value))
				{
					this.OnFileContainersChanging(value);
					this.SendPropertyChanging();
					this._FileContainers = value;
					this.SendPropertyChanged("FileContainers");
					this.OnFileContainersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Container_Site", Storage="_Sites", ThisKey="Id", OtherKey="ContainerId")]
		public EntitySet<Site> Sites
		{
			get
			{
				return this._Sites;
			}
			set
			{
				this._Sites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sites(Site entity)
		{
			this.SendPropertyChanging();
			entity.Container = this;
		}
		
		private void detach_Sites(Site entity)
		{
			this.SendPropertyChanging();
			entity.Container = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Service.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventType;
		
		private System.DateTime _EventDateTime;
		
		private bool _BusDispatched;
		
		private string _Description;
		
		private EntityRef<EventType> _EventType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventTypeChanging(int value);
    partial void OnEventTypeChanged();
    partial void OnEventDateTimeChanging(System.DateTime value);
    partial void OnEventDateTimeChanged();
    partial void OnBusDispatchedChanging(bool value);
    partial void OnBusDispatchedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Event()
		{
			this._EventType1 = default(EntityRef<EventType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="Int NOT NULL")]
		public int EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					if (this._EventType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventDateTime
		{
			get
			{
				return this._EventDateTime;
			}
			set
			{
				if ((this._EventDateTime != value))
				{
					this.OnEventDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EventDateTime = value;
					this.SendPropertyChanged("EventDateTime");
					this.OnEventDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusDispatched", DbType="Bit NOT NULL")]
		public bool BusDispatched
		{
			get
			{
				return this._BusDispatched;
			}
			set
			{
				if ((this._BusDispatched != value))
				{
					this.OnBusDispatchedChanging(value);
					this.SendPropertyChanging();
					this._BusDispatched = value;
					this.SendPropertyChanged("BusDispatched");
					this.OnBusDispatchedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_EventType1", ThisKey="EventType", OtherKey="ID", IsForeignKey=true)]
		public EventType EventType1
		{
			get
			{
				return this._EventType1.Entity;
			}
			set
			{
				EventType previousValue = this._EventType1.Entity;
				if (((previousValue != value) 
							|| (this._EventType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType1.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._EventType1.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._EventType = value.ID;
					}
					else
					{
						this._EventType = default(int);
					}
					this.SendPropertyChanged("EventType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Service.EventType")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public EventType()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_Events", ThisKey="ID", OtherKey="EventType")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType1 = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Service.Utility")]
	public partial class Utility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Site> _Sites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Utility()
		{
			this._Sites = new EntitySet<Site>(new Action<Site>(this.attach_Sites), new Action<Site>(this.detach_Sites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utility_Site", Storage="_Sites", ThisKey="Id", OtherKey="UtilityId")]
		public EntitySet<Site> Sites
		{
			get
			{
				return this._Sites;
			}
			set
			{
				this._Sites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sites(Site entity)
		{
			this.SendPropertyChanging();
			entity.Utility = this;
		}
		
		private void detach_Sites(Site entity)
		{
			this.SendPropertyChanging();
			entity.Utility = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.AvailabilityPredictionData")]
	public partial class AvailabilityPredictionData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReservoirId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Contributing_volume;
		
		private System.DateTimeOffset _BaseTime;
		
		private System.DateTimeOffset _CreationTime;
		
		private string _Comment;
		
		private int _GeneratedById;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<Reservoir> _Reservoir;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservoirIdChanging(int value);
    partial void OnReservoirIdChanged();
    partial void OnFromChanging(System.DateTimeOffset value);
    partial void OnFromChanged();
    partial void OnToChanging(System.DateTimeOffset value);
    partial void OnToChanged();
    partial void OnContributing_volumeChanging(System.Nullable<double> value);
    partial void OnContributing_volumeChanged();
    partial void OnBaseTimeChanging(System.DateTimeOffset value);
    partial void OnBaseTimeChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnGeneratedByIdChanging(int value);
    partial void OnGeneratedByIdChanged();
    #endregion
		
		public AvailabilityPredictionData()
		{
			this._Application = default(EntityRef<Application>);
			this._Reservoir = default(EntityRef<Reservoir>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservoirId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReservoirId
		{
			get
			{
				return this._ReservoirId;
			}
			set
			{
				if ((this._ReservoirId != value))
				{
					if (this._Reservoir.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservoirIdChanging(value);
					this.SendPropertyChanging();
					this._ReservoirId = value;
					this.SendPropertyChanged("ReservoirId");
					this.OnReservoirIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contributing_volume", DbType="Float")]
		public System.Nullable<double> Contributing_volume
		{
			get
			{
				return this._Contributing_volume;
			}
			set
			{
				if ((this._Contributing_volume != value))
				{
					this.OnContributing_volumeChanging(value);
					this.SendPropertyChanging();
					this._Contributing_volume = value;
					this.SendPropertyChanged("Contributing_volume");
					this.OnContributing_volumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseTime", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset BaseTime
		{
			get
			{
				return this._BaseTime;
			}
			set
			{
				if ((this._BaseTime != value))
				{
					this.OnBaseTimeChanging(value);
					this.SendPropertyChanging();
					this._BaseTime = value;
					this.SendPropertyChanged("BaseTime");
					this.OnBaseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratedById", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GeneratedById
		{
			get
			{
				return this._GeneratedById;
			}
			set
			{
				if ((this._GeneratedById != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratedByIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratedById = value;
					this.SendPropertyChanged("GeneratedById");
					this.OnGeneratedByIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_AvailabilityPredictionData", Storage="_Application", ThisKey="GeneratedById", OtherKey="Id", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.AvailabilityPredictionDatas.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.AvailabilityPredictionDatas.Add(this);
						this._GeneratedById = value.Id;
					}
					else
					{
						this._GeneratedById = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservoir_AvailabilityPredictionData", Storage="_Reservoir", ThisKey="ReservoirId", OtherKey="Id", IsForeignKey=true)]
		public Reservoir Reservoir
		{
			get
			{
				return this._Reservoir.Entity;
			}
			set
			{
				Reservoir previousValue = this._Reservoir.Entity;
				if (((previousValue != value) 
							|| (this._Reservoir.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reservoir.Entity = null;
						previousValue.AvailabilityPredictionDatas.Remove(this);
					}
					this._Reservoir.Entity = value;
					if ((value != null))
					{
						value.AvailabilityPredictionDatas.Add(this);
						this._ReservoirId = value.Id;
					}
					else
					{
						this._ReservoirId = default(int);
					}
					this.SendPropertyChanged("Reservoir");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.Borehole")]
	public partial class Borehole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Identifier;
		
		private int _SiteId;
		
		private string _Description;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Borehole()
		{
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteId", DbType="Int NOT NULL")]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_Borehole", Storage="_Site", ThisKey="SiteId", OtherKey="Id", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.Boreholes.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.Boreholes.Add(this);
						this._SiteId = value.Id;
					}
					else
					{
						this._SiteId = default(int);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.ConsumptionCharacterizationData")]
	public partial class ConsumptionCharacterizationData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _MeterId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Volume;
		
		private System.Nullable<double> _Duration;
		
		private System.Nullable<double> _Max_flow;
		
		private System.Nullable<double> _Most_freq_flow_value;
		
		private System.Nullable<int> _Most_freq_flow_Number;
		
		private string _characterized_device_value;
		
		private System.Nullable<int> _characterized_device_id;
		
		private string _confirmed_device_value;
		
		private System.Nullable<int> _confirmed_device_id;
		
		private string _confirmation;
		
		private System.Nullable<double> _time_sin;
		
		private System.Nullable<double> _time_cos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMeterIdChanging(string value);
    partial void OnMeterIdChanged();
    partial void OnFromChanging(System.DateTimeOffset value);
    partial void OnFromChanged();
    partial void OnToChanging(System.DateTimeOffset value);
    partial void OnToChanged();
    partial void OnVolumeChanging(System.Nullable<double> value);
    partial void OnVolumeChanged();
    partial void OnDurationChanging(System.Nullable<double> value);
    partial void OnDurationChanged();
    partial void OnMax_flowChanging(System.Nullable<double> value);
    partial void OnMax_flowChanged();
    partial void OnMost_freq_flow_valueChanging(System.Nullable<double> value);
    partial void OnMost_freq_flow_valueChanged();
    partial void OnMost_freq_flow_NumberChanging(System.Nullable<int> value);
    partial void OnMost_freq_flow_NumberChanged();
    partial void Oncharacterized_device_valueChanging(string value);
    partial void Oncharacterized_device_valueChanged();
    partial void Oncharacterized_device_idChanging(System.Nullable<int> value);
    partial void Oncharacterized_device_idChanged();
    partial void Onconfirmed_device_valueChanging(string value);
    partial void Onconfirmed_device_valueChanged();
    partial void Onconfirmed_device_idChanging(System.Nullable<int> value);
    partial void Onconfirmed_device_idChanged();
    partial void OnconfirmationChanging(string value);
    partial void OnconfirmationChanged();
    partial void Ontime_sinChanging(System.Nullable<double> value);
    partial void Ontime_sinChanged();
    partial void Ontime_cosChanging(System.Nullable<double> value);
    partial void Ontime_cosChanged();
    #endregion
		
		public ConsumptionCharacterizationData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MeterId
		{
			get
			{
				return this._MeterId;
			}
			set
			{
				if ((this._MeterId != value))
				{
					this.OnMeterIdChanging(value);
					this.SendPropertyChanging();
					this._MeterId = value;
					this.SendPropertyChanged("MeterId");
					this.OnMeterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Float")]
		public System.Nullable<double> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Float")]
		public System.Nullable<double> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Max_flow", DbType="Float")]
		public System.Nullable<double> Max_flow
		{
			get
			{
				return this._Max_flow;
			}
			set
			{
				if ((this._Max_flow != value))
				{
					this.OnMax_flowChanging(value);
					this.SendPropertyChanging();
					this._Max_flow = value;
					this.SendPropertyChanged("Max_flow");
					this.OnMax_flowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Most_freq_flow_value", DbType="Float")]
		public System.Nullable<double> Most_freq_flow_value
		{
			get
			{
				return this._Most_freq_flow_value;
			}
			set
			{
				if ((this._Most_freq_flow_value != value))
				{
					this.OnMost_freq_flow_valueChanging(value);
					this.SendPropertyChanging();
					this._Most_freq_flow_value = value;
					this.SendPropertyChanged("Most_freq_flow_value");
					this.OnMost_freq_flow_valueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Most_freq_flow_Number", DbType="Int")]
		public System.Nullable<int> Most_freq_flow_Number
		{
			get
			{
				return this._Most_freq_flow_Number;
			}
			set
			{
				if ((this._Most_freq_flow_Number != value))
				{
					this.OnMost_freq_flow_NumberChanging(value);
					this.SendPropertyChanging();
					this._Most_freq_flow_Number = value;
					this.SendPropertyChanged("Most_freq_flow_Number");
					this.OnMost_freq_flow_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_characterized_device_value", DbType="NVarChar(MAX)")]
		public string characterized_device_value
		{
			get
			{
				return this._characterized_device_value;
			}
			set
			{
				if ((this._characterized_device_value != value))
				{
					this.Oncharacterized_device_valueChanging(value);
					this.SendPropertyChanging();
					this._characterized_device_value = value;
					this.SendPropertyChanged("characterized_device_value");
					this.Oncharacterized_device_valueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_characterized_device_id", DbType="Int")]
		public System.Nullable<int> characterized_device_id
		{
			get
			{
				return this._characterized_device_id;
			}
			set
			{
				if ((this._characterized_device_id != value))
				{
					this.Oncharacterized_device_idChanging(value);
					this.SendPropertyChanging();
					this._characterized_device_id = value;
					this.SendPropertyChanged("characterized_device_id");
					this.Oncharacterized_device_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_confirmed_device_value", DbType="NVarChar(MAX)")]
		public string confirmed_device_value
		{
			get
			{
				return this._confirmed_device_value;
			}
			set
			{
				if ((this._confirmed_device_value != value))
				{
					this.Onconfirmed_device_valueChanging(value);
					this.SendPropertyChanging();
					this._confirmed_device_value = value;
					this.SendPropertyChanged("confirmed_device_value");
					this.Onconfirmed_device_valueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_confirmed_device_id", DbType="Int")]
		public System.Nullable<int> confirmed_device_id
		{
			get
			{
				return this._confirmed_device_id;
			}
			set
			{
				if ((this._confirmed_device_id != value))
				{
					this.Onconfirmed_device_idChanging(value);
					this.SendPropertyChanging();
					this._confirmed_device_id = value;
					this.SendPropertyChanged("confirmed_device_id");
					this.Onconfirmed_device_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_confirmation", DbType="NVarChar(MAX)")]
		public string confirmation
		{
			get
			{
				return this._confirmation;
			}
			set
			{
				if ((this._confirmation != value))
				{
					this.OnconfirmationChanging(value);
					this.SendPropertyChanging();
					this._confirmation = value;
					this.SendPropertyChanged("confirmation");
					this.OnconfirmationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_sin", DbType="Float")]
		public System.Nullable<double> time_sin
		{
			get
			{
				return this._time_sin;
			}
			set
			{
				if ((this._time_sin != value))
				{
					this.Ontime_sinChanging(value);
					this.SendPropertyChanging();
					this._time_sin = value;
					this.SendPropertyChanged("time_sin");
					this.Ontime_sinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_cos", DbType="Float")]
		public System.Nullable<double> time_cos
		{
			get
			{
				return this._time_cos;
			}
			set
			{
				if ((this._time_cos != value))
				{
					this.Ontime_cosChanging(value);
					this.SendPropertyChanging();
					this._time_cos = value;
					this.SendPropertyChanged("time_cos");
					this.Ontime_cosChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.DMA")]
	public partial class DMA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _SiteId;
		
		private int _WeatherStationId;
		
		private double _BurstThreshold;
		
		private string _Identifier;
		
		private string _Description;
		
		private bool _Virtual;
		
		private EntitySet<DemandPredictionData> _DemandPredictionDatas;
		
		private EntitySet<PricingData> _PricingDatas;
		
		private EntitySet<DMALeakageData> _DMALeakageDatas;
		
		private EntitySet<DMAData> _DMADatas;
		
		private EntitySet<Meter> _Meters;
		
		private EntitySet<Customer> _Customers;
		
		private EntityRef<WeatherStation> _WeatherStation;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    partial void OnWeatherStationIdChanging(int value);
    partial void OnWeatherStationIdChanged();
    partial void OnBurstThresholdChanging(double value);
    partial void OnBurstThresholdChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVirtualChanging(bool value);
    partial void OnVirtualChanged();
    #endregion
		
		public DMA()
		{
			this._DemandPredictionDatas = new EntitySet<DemandPredictionData>(new Action<DemandPredictionData>(this.attach_DemandPredictionDatas), new Action<DemandPredictionData>(this.detach_DemandPredictionDatas));
			this._PricingDatas = new EntitySet<PricingData>(new Action<PricingData>(this.attach_PricingDatas), new Action<PricingData>(this.detach_PricingDatas));
			this._DMALeakageDatas = new EntitySet<DMALeakageData>(new Action<DMALeakageData>(this.attach_DMALeakageDatas), new Action<DMALeakageData>(this.detach_DMALeakageDatas));
			this._DMADatas = new EntitySet<DMAData>(new Action<DMAData>(this.attach_DMADatas), new Action<DMAData>(this.detach_DMADatas));
			this._Meters = new EntitySet<Meter>(new Action<Meter>(this.attach_Meters), new Action<Meter>(this.detach_Meters));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._WeatherStation = default(EntityRef<WeatherStation>);
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteId", DbType="Int NOT NULL")]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					if (this._WeatherStation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWeatherStationIdChanging(value);
					this.SendPropertyChanging();
					this._WeatherStationId = value;
					this.SendPropertyChanged("WeatherStationId");
					this.OnWeatherStationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BurstThreshold", DbType="Float NOT NULL")]
		public double BurstThreshold
		{
			get
			{
				return this._BurstThreshold;
			}
			set
			{
				if ((this._BurstThreshold != value))
				{
					this.OnBurstThresholdChanging(value);
					this.SendPropertyChanging();
					this._BurstThreshold = value;
					this.SendPropertyChanged("BurstThreshold");
					this.OnBurstThresholdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Virtual", DbType="Bit NOT NULL")]
		public bool Virtual
		{
			get
			{
				return this._Virtual;
			}
			set
			{
				if ((this._Virtual != value))
				{
					this.OnVirtualChanging(value);
					this.SendPropertyChanging();
					this._Virtual = value;
					this.SendPropertyChanged("Virtual");
					this.OnVirtualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_DemandPredictionData", Storage="_DemandPredictionDatas", ThisKey="Id", OtherKey="DMAId")]
		public EntitySet<DemandPredictionData> DemandPredictionDatas
		{
			get
			{
				return this._DemandPredictionDatas;
			}
			set
			{
				this._DemandPredictionDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_PricingData", Storage="_PricingDatas", ThisKey="Id", OtherKey="LocationId")]
		public EntitySet<PricingData> PricingDatas
		{
			get
			{
				return this._PricingDatas;
			}
			set
			{
				this._PricingDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_DMALeakageData", Storage="_DMALeakageDatas", ThisKey="Id", OtherKey="DMAId")]
		public EntitySet<DMALeakageData> DMALeakageDatas
		{
			get
			{
				return this._DMALeakageDatas;
			}
			set
			{
				this._DMALeakageDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_DMAData", Storage="_DMADatas", ThisKey="Id", OtherKey="DMAId")]
		public EntitySet<DMAData> DMADatas
		{
			get
			{
				return this._DMADatas;
			}
			set
			{
				this._DMADatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_Meter", Storage="_Meters", ThisKey="Id", OtherKey="DMAId")]
		public EntitySet<Meter> Meters
		{
			get
			{
				return this._Meters;
			}
			set
			{
				this._Meters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_Customer", Storage="_Customers", ThisKey="Id", OtherKey="DmaId")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeatherStation_DMA", Storage="_WeatherStation", ThisKey="WeatherStationId", OtherKey="Id", IsForeignKey=true)]
		public WeatherStation WeatherStation
		{
			get
			{
				return this._WeatherStation.Entity;
			}
			set
			{
				WeatherStation previousValue = this._WeatherStation.Entity;
				if (((previousValue != value) 
							|| (this._WeatherStation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeatherStation.Entity = null;
						previousValue.DMAs.Remove(this);
					}
					this._WeatherStation.Entity = value;
					if ((value != null))
					{
						value.DMAs.Add(this);
						this._WeatherStationId = value.Id;
					}
					else
					{
						this._WeatherStationId = default(int);
					}
					this.SendPropertyChanged("WeatherStation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_DMA", Storage="_Site", ThisKey="SiteId", OtherKey="Id", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.DMAs.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.DMAs.Add(this);
						this._SiteId = value.Id;
					}
					else
					{
						this._SiteId = default(int);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DemandPredictionDatas(DemandPredictionData entity)
		{
			this.SendPropertyChanging();
			entity.DMA = this;
		}
		
		private void detach_DemandPredictionDatas(DemandPredictionData entity)
		{
			this.SendPropertyChanging();
			entity.DMA = null;
		}
		
		private void attach_PricingDatas(PricingData entity)
		{
			this.SendPropertyChanging();
			entity.DMA = this;
		}
		
		private void detach_PricingDatas(PricingData entity)
		{
			this.SendPropertyChanging();
			entity.DMA = null;
		}
		
		private void attach_DMALeakageDatas(DMALeakageData entity)
		{
			this.SendPropertyChanging();
			entity.DMA = this;
		}
		
		private void detach_DMALeakageDatas(DMALeakageData entity)
		{
			this.SendPropertyChanging();
			entity.DMA = null;
		}
		
		private void attach_DMADatas(DMAData entity)
		{
			this.SendPropertyChanging();
			entity.DMA = this;
		}
		
		private void detach_DMADatas(DMAData entity)
		{
			this.SendPropertyChanging();
			entity.DMA = null;
		}
		
		private void attach_Meters(Meter entity)
		{
			this.SendPropertyChanging();
			entity.DMA = this;
		}
		
		private void detach_Meters(Meter entity)
		{
			this.SendPropertyChanging();
			entity.DMA = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.DMA = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.DMA = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.DMALeakageData")]
	public partial class DMALeakageData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DMAId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Real_losses_value;
		
		private string _Real_losses_Type;
		
		private System.DateTimeOffset _BaseTime;
		
		private System.DateTimeOffset _CreationTime;
		
		private string _Comment;
		
		private int _GeneratedById;
		
		private EntityRef<DMA> _DMA;
		
		private EntityRef<Application> _Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDMAIdChanging(int value);
    partial void OnDMAIdChanged();
    partial void OnFromChanging(System.DateTimeOffset value);
    partial void OnFromChanged();
    partial void OnToChanging(System.DateTimeOffset value);
    partial void OnToChanged();
    partial void OnReal_losses_valueChanging(System.Nullable<double> value);
    partial void OnReal_losses_valueChanged();
    partial void OnReal_losses_TypeChanging(string value);
    partial void OnReal_losses_TypeChanged();
    partial void OnBaseTimeChanging(System.DateTimeOffset value);
    partial void OnBaseTimeChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnGeneratedByIdChanging(int value);
    partial void OnGeneratedByIdChanged();
    #endregion
		
		public DMALeakageData()
		{
			this._DMA = default(EntityRef<DMA>);
			this._Application = default(EntityRef<Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DMAId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DMAId
		{
			get
			{
				return this._DMAId;
			}
			set
			{
				if ((this._DMAId != value))
				{
					if (this._DMA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDMAIdChanging(value);
					this.SendPropertyChanging();
					this._DMAId = value;
					this.SendPropertyChanged("DMAId");
					this.OnDMAIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Real_losses_value", DbType="Float")]
		public System.Nullable<double> Real_losses_value
		{
			get
			{
				return this._Real_losses_value;
			}
			set
			{
				if ((this._Real_losses_value != value))
				{
					this.OnReal_losses_valueChanging(value);
					this.SendPropertyChanging();
					this._Real_losses_value = value;
					this.SendPropertyChanged("Real_losses_value");
					this.OnReal_losses_valueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Real_losses_Type", DbType="NVarChar(MAX)")]
		public string Real_losses_Type
		{
			get
			{
				return this._Real_losses_Type;
			}
			set
			{
				if ((this._Real_losses_Type != value))
				{
					this.OnReal_losses_TypeChanging(value);
					this.SendPropertyChanging();
					this._Real_losses_Type = value;
					this.SendPropertyChanged("Real_losses_Type");
					this.OnReal_losses_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseTime", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset BaseTime
		{
			get
			{
				return this._BaseTime;
			}
			set
			{
				if ((this._BaseTime != value))
				{
					this.OnBaseTimeChanging(value);
					this.SendPropertyChanging();
					this._BaseTime = value;
					this.SendPropertyChanged("BaseTime");
					this.OnBaseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratedById", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GeneratedById
		{
			get
			{
				return this._GeneratedById;
			}
			set
			{
				if ((this._GeneratedById != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratedByIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratedById = value;
					this.SendPropertyChanged("GeneratedById");
					this.OnGeneratedByIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_DMALeakageData", Storage="_DMA", ThisKey="DMAId", OtherKey="Id", IsForeignKey=true)]
		public DMA DMA
		{
			get
			{
				return this._DMA.Entity;
			}
			set
			{
				DMA previousValue = this._DMA.Entity;
				if (((previousValue != value) 
							|| (this._DMA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DMA.Entity = null;
						previousValue.DMALeakageDatas.Remove(this);
					}
					this._DMA.Entity = value;
					if ((value != null))
					{
						value.DMALeakageDatas.Add(this);
						this._DMAId = value.Id;
					}
					else
					{
						this._DMAId = default(int);
					}
					this.SendPropertyChanged("DMA");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_DMALeakageData", Storage="_Application", ThisKey="GeneratedById", OtherKey="Id", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.DMALeakageDatas.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.DMALeakageDatas.Add(this);
						this._GeneratedById = value.Id;
					}
					else
					{
						this._GeneratedById = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.[Pipe]")]
	public partial class Pipe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Identifier;
		
		private int _SiteId;
		
		private string _Description;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Pipe()
		{
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteId", DbType="Int NOT NULL")]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_Pipe", Storage="_Site", ThisKey="SiteId", OtherKey="Id", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.Pipes.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.Pipes.Add(this);
						this._SiteId = value.Id;
					}
					else
					{
						this._SiteId = default(int);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.PumpStation")]
	public partial class PumpStation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Identifier;
		
		private int _SiteId;
		
		private string _Description;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PumpStation()
		{
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteId", DbType="Int NOT NULL")]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_PumpStation", Storage="_Site", ThisKey="SiteId", OtherKey="Id", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.PumpStations.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.PumpStations.Add(this);
						this._SiteId = value.Id;
					}
					else
					{
						this._SiteId = default(int);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.Reservoir")]
	public partial class Reservoir : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Identifier;
		
		private string _Description;
		
		private int _SiteId;
		
		private EntitySet<AvailabilityPredictionData> _AvailabilityPredictionDatas;
		
		private EntitySet<ReservoirData> _ReservoirDatas;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    #endregion
		
		public Reservoir()
		{
			this._AvailabilityPredictionDatas = new EntitySet<AvailabilityPredictionData>(new Action<AvailabilityPredictionData>(this.attach_AvailabilityPredictionDatas), new Action<AvailabilityPredictionData>(this.detach_AvailabilityPredictionDatas));
			this._ReservoirDatas = new EntitySet<ReservoirData>(new Action<ReservoirData>(this.attach_ReservoirDatas), new Action<ReservoirData>(this.detach_ReservoirDatas));
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX)")]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteId", DbType="Int NOT NULL")]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservoir_AvailabilityPredictionData", Storage="_AvailabilityPredictionDatas", ThisKey="Id", OtherKey="ReservoirId")]
		public EntitySet<AvailabilityPredictionData> AvailabilityPredictionDatas
		{
			get
			{
				return this._AvailabilityPredictionDatas;
			}
			set
			{
				this._AvailabilityPredictionDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservoir_ReservoirData", Storage="_ReservoirDatas", ThisKey="Id", OtherKey="ReservoirId")]
		public EntitySet<ReservoirData> ReservoirDatas
		{
			get
			{
				return this._ReservoirDatas;
			}
			set
			{
				this._ReservoirDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_Reservoir", Storage="_Site", ThisKey="SiteId", OtherKey="Id", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.Reservoirs.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.Reservoirs.Add(this);
						this._SiteId = value.Id;
					}
					else
					{
						this._SiteId = default(int);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AvailabilityPredictionDatas(AvailabilityPredictionData entity)
		{
			this.SendPropertyChanging();
			entity.Reservoir = this;
		}
		
		private void detach_AvailabilityPredictionDatas(AvailabilityPredictionData entity)
		{
			this.SendPropertyChanging();
			entity.Reservoir = null;
		}
		
		private void attach_ReservoirDatas(ReservoirData entity)
		{
			this.SendPropertyChanging();
			entity.Reservoir = this;
		}
		
		private void detach_ReservoirDatas(ReservoirData entity)
		{
			this.SendPropertyChanging();
			entity.Reservoir = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.ReservoirData")]
	public partial class ReservoirData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReservoirId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Volume;
		
		private System.Nullable<double> _Level;
		
		private EntityRef<Reservoir> _Reservoir;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservoirIdChanging(int value);
    partial void OnReservoirIdChanged();
    partial void OnFromChanging(System.DateTimeOffset value);
    partial void OnFromChanged();
    partial void OnToChanging(System.DateTimeOffset value);
    partial void OnToChanged();
    partial void OnVolumeChanging(System.Nullable<double> value);
    partial void OnVolumeChanged();
    partial void OnLevelChanging(System.Nullable<double> value);
    partial void OnLevelChanged();
    #endregion
		
		public ReservoirData()
		{
			this._Reservoir = default(EntityRef<Reservoir>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservoirId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReservoirId
		{
			get
			{
				return this._ReservoirId;
			}
			set
			{
				if ((this._ReservoirId != value))
				{
					if (this._Reservoir.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservoirIdChanging(value);
					this.SendPropertyChanging();
					this._ReservoirId = value;
					this.SendPropertyChanged("ReservoirId");
					this.OnReservoirIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Float")]
		public System.Nullable<double> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Float")]
		public System.Nullable<double> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservoir_ReservoirData", Storage="_Reservoir", ThisKey="ReservoirId", OtherKey="Id", IsForeignKey=true)]
		public Reservoir Reservoir
		{
			get
			{
				return this._Reservoir.Entity;
			}
			set
			{
				Reservoir previousValue = this._Reservoir.Entity;
				if (((previousValue != value) 
							|| (this._Reservoir.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reservoir.Entity = null;
						previousValue.ReservoirDatas.Remove(this);
					}
					this._Reservoir.Entity = value;
					if ((value != null))
					{
						value.ReservoirDatas.Add(this);
						this._ReservoirId = value.Id;
					}
					else
					{
						this._ReservoirId = default(int);
					}
					this.SendPropertyChanged("Reservoir");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.Tank")]
	public partial class Tank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Identifier;
		
		private string _Description;
		
		private int _SiteId;
		
		private EntitySet<TankData> _TankDatas;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    #endregion
		
		public Tank()
		{
			this._TankDatas = new EntitySet<TankData>(new Action<TankData>(this.attach_TankDatas), new Action<TankData>(this.detach_TankDatas));
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteId", DbType="Int NOT NULL")]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tank_TankData", Storage="_TankDatas", ThisKey="Id", OtherKey="TankId")]
		public EntitySet<TankData> TankDatas
		{
			get
			{
				return this._TankDatas;
			}
			set
			{
				this._TankDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_Tank", Storage="_Site", ThisKey="SiteId", OtherKey="Id", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.Tanks.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.Tanks.Add(this);
						this._SiteId = value.Id;
					}
					else
					{
						this._SiteId = default(int);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TankDatas(TankData entity)
		{
			this.SendPropertyChanging();
			entity.Tank = this;
		}
		
		private void detach_TankDatas(TankData entity)
		{
			this.SendPropertyChanging();
			entity.Tank = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.TankData")]
	public partial class TankData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TankId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Volume;
		
		private System.Nullable<double> _outflow;
		
		private System.Nullable<double> _Inflow;
		
		private EntityRef<Tank> _Tank;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTankIdChanging(int value);
    partial void OnTankIdChanged();
    partial void OnFromChanging(System.DateTimeOffset value);
    partial void OnFromChanged();
    partial void OnToChanging(System.DateTimeOffset value);
    partial void OnToChanged();
    partial void OnVolumeChanging(System.Nullable<double> value);
    partial void OnVolumeChanged();
    partial void OnoutflowChanging(System.Nullable<double> value);
    partial void OnoutflowChanged();
    partial void OnInflowChanging(System.Nullable<double> value);
    partial void OnInflowChanged();
    #endregion
		
		public TankData()
		{
			this._Tank = default(EntityRef<Tank>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TankId
		{
			get
			{
				return this._TankId;
			}
			set
			{
				if ((this._TankId != value))
				{
					if (this._Tank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTankIdChanging(value);
					this.SendPropertyChanging();
					this._TankId = value;
					this.SendPropertyChanged("TankId");
					this.OnTankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Float")]
		public System.Nullable<double> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_outflow", DbType="Float")]
		public System.Nullable<double> outflow
		{
			get
			{
				return this._outflow;
			}
			set
			{
				if ((this._outflow != value))
				{
					this.OnoutflowChanging(value);
					this.SendPropertyChanging();
					this._outflow = value;
					this.SendPropertyChanged("outflow");
					this.OnoutflowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inflow", DbType="Float")]
		public System.Nullable<double> Inflow
		{
			get
			{
				return this._Inflow;
			}
			set
			{
				if ((this._Inflow != value))
				{
					this.OnInflowChanging(value);
					this.SendPropertyChanging();
					this._Inflow = value;
					this.SendPropertyChanged("Inflow");
					this.OnInflowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tank_TankData", Storage="_Tank", ThisKey="TankId", OtherKey="Id", IsForeignKey=true)]
		public Tank Tank
		{
			get
			{
				return this._Tank.Entity;
			}
			set
			{
				Tank previousValue = this._Tank.Entity;
				if (((previousValue != value) 
							|| (this._Tank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tank.Entity = null;
						previousValue.TankDatas.Remove(this);
					}
					this._Tank.Entity = value;
					if ((value != null))
					{
						value.TankDatas.Add(this);
						this._TankId = value.Id;
					}
					else
					{
						this._TankId = default(int);
					}
					this.SendPropertyChanged("Tank");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.VariableType")]
	public partial class VariableType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public VariableType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.Site")]
	public partial class Site : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _UtilityId;
		
		private int _ContainerId;
		
		private string _TableName;
		
		private EntitySet<WaterTreatmentPlant> _WaterTreatmentPlants;
		
		private EntitySet<Borehole> _Boreholes;
		
		private EntitySet<DMA> _DMAs;
		
		private EntitySet<Pipe> _Pipes;
		
		private EntitySet<PumpStation> _PumpStations;
		
		private EntitySet<Reservoir> _Reservoirs;
		
		private EntitySet<Tank> _Tanks;
		
		private EntityRef<Container> _Container;
		
		private EntityRef<Utility> _Utility;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUtilityIdChanging(int value);
    partial void OnUtilityIdChanged();
    partial void OnContainerIdChanging(int value);
    partial void OnContainerIdChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    #endregion
		
		public Site()
		{
			this._WaterTreatmentPlants = new EntitySet<WaterTreatmentPlant>(new Action<WaterTreatmentPlant>(this.attach_WaterTreatmentPlants), new Action<WaterTreatmentPlant>(this.detach_WaterTreatmentPlants));
			this._Boreholes = new EntitySet<Borehole>(new Action<Borehole>(this.attach_Boreholes), new Action<Borehole>(this.detach_Boreholes));
			this._DMAs = new EntitySet<DMA>(new Action<DMA>(this.attach_DMAs), new Action<DMA>(this.detach_DMAs));
			this._Pipes = new EntitySet<Pipe>(new Action<Pipe>(this.attach_Pipes), new Action<Pipe>(this.detach_Pipes));
			this._PumpStations = new EntitySet<PumpStation>(new Action<PumpStation>(this.attach_PumpStations), new Action<PumpStation>(this.detach_PumpStations));
			this._Reservoirs = new EntitySet<Reservoir>(new Action<Reservoir>(this.attach_Reservoirs), new Action<Reservoir>(this.detach_Reservoirs));
			this._Tanks = new EntitySet<Tank>(new Action<Tank>(this.attach_Tanks), new Action<Tank>(this.detach_Tanks));
			this._Container = default(EntityRef<Container>);
			this._Utility = default(EntityRef<Utility>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityId", DbType="Int NOT NULL")]
		public int UtilityId
		{
			get
			{
				return this._UtilityId;
			}
			set
			{
				if ((this._UtilityId != value))
				{
					if (this._Utility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityIdChanging(value);
					this.SendPropertyChanging();
					this._UtilityId = value;
					this.SendPropertyChanged("UtilityId");
					this.OnUtilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainerId", DbType="Int NOT NULL")]
		public int ContainerId
		{
			get
			{
				return this._ContainerId;
			}
			set
			{
				if ((this._ContainerId != value))
				{
					if (this._Container.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContainerIdChanging(value);
					this.SendPropertyChanging();
					this._ContainerId = value;
					this.SendPropertyChanged("ContainerId");
					this.OnContainerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(MAX)")]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_WaterTreatmentPlant", Storage="_WaterTreatmentPlants", ThisKey="Id", OtherKey="SiteId")]
		public EntitySet<WaterTreatmentPlant> WaterTreatmentPlants
		{
			get
			{
				return this._WaterTreatmentPlants;
			}
			set
			{
				this._WaterTreatmentPlants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_Borehole", Storage="_Boreholes", ThisKey="Id", OtherKey="SiteId")]
		public EntitySet<Borehole> Boreholes
		{
			get
			{
				return this._Boreholes;
			}
			set
			{
				this._Boreholes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_DMA", Storage="_DMAs", ThisKey="Id", OtherKey="SiteId")]
		public EntitySet<DMA> DMAs
		{
			get
			{
				return this._DMAs;
			}
			set
			{
				this._DMAs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_Pipe", Storage="_Pipes", ThisKey="Id", OtherKey="SiteId")]
		public EntitySet<Pipe> Pipes
		{
			get
			{
				return this._Pipes;
			}
			set
			{
				this._Pipes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_PumpStation", Storage="_PumpStations", ThisKey="Id", OtherKey="SiteId")]
		public EntitySet<PumpStation> PumpStations
		{
			get
			{
				return this._PumpStations;
			}
			set
			{
				this._PumpStations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_Reservoir", Storage="_Reservoirs", ThisKey="Id", OtherKey="SiteId")]
		public EntitySet<Reservoir> Reservoirs
		{
			get
			{
				return this._Reservoirs;
			}
			set
			{
				this._Reservoirs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_Tank", Storage="_Tanks", ThisKey="Id", OtherKey="SiteId")]
		public EntitySet<Tank> Tanks
		{
			get
			{
				return this._Tanks;
			}
			set
			{
				this._Tanks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Container_Site", Storage="_Container", ThisKey="ContainerId", OtherKey="Id", IsForeignKey=true)]
		public Container Container
		{
			get
			{
				return this._Container.Entity;
			}
			set
			{
				Container previousValue = this._Container.Entity;
				if (((previousValue != value) 
							|| (this._Container.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Container.Entity = null;
						previousValue.Sites.Remove(this);
					}
					this._Container.Entity = value;
					if ((value != null))
					{
						value.Sites.Add(this);
						this._ContainerId = value.Id;
					}
					else
					{
						this._ContainerId = default(int);
					}
					this.SendPropertyChanged("Container");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utility_Site", Storage="_Utility", ThisKey="UtilityId", OtherKey="Id", IsForeignKey=true)]
		public Utility Utility
		{
			get
			{
				return this._Utility.Entity;
			}
			set
			{
				Utility previousValue = this._Utility.Entity;
				if (((previousValue != value) 
							|| (this._Utility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Utility.Entity = null;
						previousValue.Sites.Remove(this);
					}
					this._Utility.Entity = value;
					if ((value != null))
					{
						value.Sites.Add(this);
						this._UtilityId = value.Id;
					}
					else
					{
						this._UtilityId = default(int);
					}
					this.SendPropertyChanged("Utility");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WaterTreatmentPlants(WaterTreatmentPlant entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_WaterTreatmentPlants(WaterTreatmentPlant entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
		
		private void attach_Boreholes(Borehole entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_Boreholes(Borehole entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
		
		private void attach_DMAs(DMA entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_DMAs(DMA entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
		
		private void attach_Pipes(Pipe entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_Pipes(Pipe entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
		
		private void attach_PumpStations(PumpStation entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_PumpStations(PumpStation entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
		
		private void attach_Reservoirs(Reservoir entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_Reservoirs(Reservoir entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
		
		private void attach_Tanks(Tank entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_Tanks(Tank entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.DMAData")]
	public partial class DMAData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DMAId;
		
		private System.DateTimeOffset _Time;
		
		private System.Nullable<double> _Flow;
		
		private System.Nullable<double> _Pressure;
		
		private System.Nullable<double> _Volume;
		
		private EntityRef<DMA> _DMA;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDMAIdChanging(int value);
    partial void OnDMAIdChanged();
    partial void OnTimeChanging(System.DateTimeOffset value);
    partial void OnTimeChanged();
    partial void OnFlowChanging(System.Nullable<double> value);
    partial void OnFlowChanged();
    partial void OnPressureChanging(System.Nullable<double> value);
    partial void OnPressureChanged();
    partial void OnVolumeChanging(System.Nullable<double> value);
    partial void OnVolumeChanged();
    #endregion
		
		public DMAData()
		{
			this._DMA = default(EntityRef<DMA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DMAId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DMAId
		{
			get
			{
				return this._DMAId;
			}
			set
			{
				if ((this._DMAId != value))
				{
					if (this._DMA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDMAIdChanging(value);
					this.SendPropertyChanging();
					this._DMAId = value;
					this.SendPropertyChanged("DMAId");
					this.OnDMAIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flow", DbType="Float")]
		public System.Nullable<double> Flow
		{
			get
			{
				return this._Flow;
			}
			set
			{
				if ((this._Flow != value))
				{
					this.OnFlowChanging(value);
					this.SendPropertyChanging();
					this._Flow = value;
					this.SendPropertyChanged("Flow");
					this.OnFlowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pressure", DbType="Float")]
		public System.Nullable<double> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Float")]
		public System.Nullable<double> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_DMAData", Storage="_DMA", ThisKey="DMAId", OtherKey="Id", IsForeignKey=true)]
		public DMA DMA
		{
			get
			{
				return this._DMA.Entity;
			}
			set
			{
				DMA previousValue = this._DMA.Entity;
				if (((previousValue != value) 
							|| (this._DMA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DMA.Entity = null;
						previousValue.DMADatas.Remove(this);
					}
					this._DMA.Entity = value;
					if ((value != null))
					{
						value.DMADatas.Add(this);
						this._DMAId = value.Id;
					}
					else
					{
						this._DMAId = default(int);
					}
					this.SendPropertyChanged("DMA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.Meter")]
	public partial class Meter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _MeterIdentity;
		
		private int _DMAId;
		
		private EntitySet<Customer> _Customers;
		
		private EntityRef<DMA> _DMA;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMeterIdentityChanging(string value);
    partial void OnMeterIdentityChanged();
    partial void OnDMAIdChanging(int value);
    partial void OnDMAIdChanged();
    #endregion
		
		public Meter()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._DMA = default(EntityRef<DMA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterIdentity", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string MeterIdentity
		{
			get
			{
				return this._MeterIdentity;
			}
			set
			{
				if ((this._MeterIdentity != value))
				{
					this.OnMeterIdentityChanging(value);
					this.SendPropertyChanging();
					this._MeterIdentity = value;
					this.SendPropertyChanged("MeterIdentity");
					this.OnMeterIdentityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DMAId", DbType="Int NOT NULL")]
		public int DMAId
		{
			get
			{
				return this._DMAId;
			}
			set
			{
				if ((this._DMAId != value))
				{
					if (this._DMA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDMAIdChanging(value);
					this.SendPropertyChanging();
					this._DMAId = value;
					this.SendPropertyChanged("DMAId");
					this.OnDMAIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Customer", Storage="_Customers", ThisKey="Id", OtherKey="MeterId")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_Meter", Storage="_DMA", ThisKey="DMAId", OtherKey="Id", IsForeignKey=true)]
		public DMA DMA
		{
			get
			{
				return this._DMA.Entity;
			}
			set
			{
				DMA previousValue = this._DMA.Entity;
				if (((previousValue != value) 
							|| (this._DMA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DMA.Entity = null;
						previousValue.Meters.Remove(this);
					}
					this._DMA.Entity = value;
					if ((value != null))
					{
						value.Meters.Add(this);
						this._DMAId = value.Id;
					}
					else
					{
						this._DMAId = default(int);
					}
					this.SendPropertyChanged("DMA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Meter = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Meter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Topology.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CustomerNumber;
		
		private int _MeterId;
		
		private int _DmaId;
		
		private EntityRef<DMA> _DMA;
		
		private EntityRef<Meter> _Meter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerNumberChanging(string value);
    partial void OnCustomerNumberChanged();
    partial void OnMeterIdChanging(int value);
    partial void OnMeterIdChanged();
    partial void OnDmaIdChanging(int value);
    partial void OnDmaIdChanged();
    #endregion
		
		public Customer()
		{
			this._DMA = default(EntityRef<DMA>);
			this._Meter = default(EntityRef<Meter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CustomerNumber
		{
			get
			{
				return this._CustomerNumber;
			}
			set
			{
				if ((this._CustomerNumber != value))
				{
					this.OnCustomerNumberChanging(value);
					this.SendPropertyChanging();
					this._CustomerNumber = value;
					this.SendPropertyChanged("CustomerNumber");
					this.OnCustomerNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterId", DbType="Int NOT NULL")]
		public int MeterId
		{
			get
			{
				return this._MeterId;
			}
			set
			{
				if ((this._MeterId != value))
				{
					if (this._Meter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterIdChanging(value);
					this.SendPropertyChanging();
					this._MeterId = value;
					this.SendPropertyChanged("MeterId");
					this.OnMeterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DmaId", DbType="Int NOT NULL")]
		public int DmaId
		{
			get
			{
				return this._DmaId;
			}
			set
			{
				if ((this._DmaId != value))
				{
					if (this._DMA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDmaIdChanging(value);
					this.SendPropertyChanging();
					this._DmaId = value;
					this.SendPropertyChanged("DmaId");
					this.OnDmaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMA_Customer", Storage="_DMA", ThisKey="DmaId", OtherKey="Id", IsForeignKey=true)]
		public DMA DMA
		{
			get
			{
				return this._DMA.Entity;
			}
			set
			{
				DMA previousValue = this._DMA.Entity;
				if (((previousValue != value) 
							|| (this._DMA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DMA.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._DMA.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._DmaId = value.Id;
					}
					else
					{
						this._DmaId = default(int);
					}
					this.SendPropertyChanged("DMA");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Customer", Storage="_Meter", ThisKey="MeterId", OtherKey="Id", IsForeignKey=true)]
		public Meter Meter
		{
			get
			{
				return this._Meter.Entity;
			}
			set
			{
				Meter previousValue = this._Meter.Entity;
				if (((previousValue != value) 
							|| (this._Meter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meter.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Meter.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._MeterId = value.Id;
					}
					else
					{
						this._MeterId = default(int);
					}
					this.SendPropertyChanged("Meter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class WeatherDataGetResult
	{
		
		private string _Column1;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Precipitation;
		
		private System.Nullable<double> _Temperature;
		
		private System.Nullable<int> _Humidity;
		
		private System.Nullable<int> _Pressure;
		
		private System.Nullable<double> _Wind_velocity;
		
		private string _Wind_direction;
		
		private System.Nullable<double> _Solar_radiation;
		
		private int _WeatherStationId;
		
		public WeatherDataGetResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="", Storage="_Column1", DbType="VarChar(13)")]
		public string Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precipitation", DbType="Float")]
		public System.Nullable<double> Precipitation
		{
			get
			{
				return this._Precipitation;
			}
			set
			{
				if ((this._Precipitation != value))
				{
					this._Precipitation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Float")]
		public System.Nullable<double> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this._Temperature = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Int")]
		public System.Nullable<int> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this._Humidity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pressure", DbType="Int")]
		public System.Nullable<int> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this._Pressure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_velocity", DbType="Float")]
		public System.Nullable<double> Wind_velocity
		{
			get
			{
				return this._Wind_velocity;
			}
			set
			{
				if ((this._Wind_velocity != value))
				{
					this._Wind_velocity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_direction", DbType="NVarChar(MAX)")]
		public string Wind_direction
		{
			get
			{
				return this._Wind_direction;
			}
			set
			{
				if ((this._Wind_direction != value))
				{
					this._Wind_direction = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solar_radiation", DbType="Float")]
		public System.Nullable<double> Solar_radiation
		{
			get
			{
				return this._Solar_radiation;
			}
			set
			{
				if ((this._Solar_radiation != value))
				{
					this._Solar_radiation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
	}
	
	public partial class WeatherDataGet_FullResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Precipitation;
		
		private System.Nullable<double> _Temperature;
		
		private System.Nullable<int> _Humidity;
		
		private System.Nullable<int> _Pressure;
		
		private System.Nullable<double> _Wind_velocity;
		
		private string _Wind_direction;
		
		private System.Nullable<double> _Solar_radiation;
		
		public WeatherDataGet_FullResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precipitation", DbType="Float")]
		public System.Nullable<double> Precipitation
		{
			get
			{
				return this._Precipitation;
			}
			set
			{
				if ((this._Precipitation != value))
				{
					this._Precipitation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Float")]
		public System.Nullable<double> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this._Temperature = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Int")]
		public System.Nullable<int> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this._Humidity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pressure", DbType="Int")]
		public System.Nullable<int> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this._Pressure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_velocity", DbType="Float")]
		public System.Nullable<double> Wind_velocity
		{
			get
			{
				return this._Wind_velocity;
			}
			set
			{
				if ((this._Wind_velocity != value))
				{
					this._Wind_velocity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_direction", DbType="NVarChar(MAX)")]
		public string Wind_direction
		{
			get
			{
				return this._Wind_direction;
			}
			set
			{
				if ((this._Wind_direction != value))
				{
					this._Wind_direction = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solar_radiation", DbType="Float")]
		public System.Nullable<double> Solar_radiation
		{
			get
			{
				return this._Solar_radiation;
			}
			set
			{
				if ((this._Solar_radiation != value))
				{
					this._Solar_radiation = value;
				}
			}
		}
	}
	
	public partial class WeatherDataGet_HourResult
	{
		
		private System.Nullable<long> _rn;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Precipitation;
		
		private System.Nullable<double> _Temperature;
		
		private System.Nullable<int> _Humidity;
		
		private System.Nullable<int> _Pressure;
		
		private System.Nullable<double> _Wind_velocity;
		
		private string _Wind_direction;
		
		private System.Nullable<double> _Solar_radiation;
		
		private string _Identifier;
		
		public WeatherDataGet_HourResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rn", DbType="BigInt")]
		public System.Nullable<long> rn
		{
			get
			{
				return this._rn;
			}
			set
			{
				if ((this._rn != value))
				{
					this._rn = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precipitation", DbType="Float")]
		public System.Nullable<double> Precipitation
		{
			get
			{
				return this._Precipitation;
			}
			set
			{
				if ((this._Precipitation != value))
				{
					this._Precipitation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Float")]
		public System.Nullable<double> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this._Temperature = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Int")]
		public System.Nullable<int> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this._Humidity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pressure", DbType="Int")]
		public System.Nullable<int> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this._Pressure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_velocity", DbType="Float")]
		public System.Nullable<double> Wind_velocity
		{
			get
			{
				return this._Wind_velocity;
			}
			set
			{
				if ((this._Wind_velocity != value))
				{
					this._Wind_velocity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_direction", DbType="NVarChar(MAX)")]
		public string Wind_direction
		{
			get
			{
				return this._Wind_direction;
			}
			set
			{
				if ((this._Wind_direction != value))
				{
					this._Wind_direction = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solar_radiation", DbType="Float")]
		public System.Nullable<double> Solar_radiation
		{
			get
			{
				return this._Solar_radiation;
			}
			set
			{
				if ((this._Solar_radiation != value))
				{
					this._Solar_radiation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this._Identifier = value;
				}
			}
		}
	}
	
	public partial class FindNearestDemandPredictionResult
	{
		
		private int _DMAId;
		
		private System.DateTimeOffset _BaseTime;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private double _Demand;
		
		private System.Nullable<double> _Uncertainty;
		
		private string _Comment;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestDemandPredictionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DMAId", DbType="Int NOT NULL")]
		public int DMAId
		{
			get
			{
				return this._DMAId;
			}
			set
			{
				if ((this._DMAId != value))
				{
					this._DMAId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset BaseTime
		{
			get
			{
				return this._BaseTime;
			}
			set
			{
				if ((this._BaseTime != value))
				{
					this._BaseTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this._CreationTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Demand", DbType="Float NOT NULL")]
		public double Demand
		{
			get
			{
				return this._Demand;
			}
			set
			{
				if ((this._Demand != value))
				{
					this._Demand = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uncertainty", DbType="Float")]
		public System.Nullable<double> Uncertainty
		{
			get
			{
				return this._Uncertainty;
			}
			set
			{
				if ((this._Uncertainty != value))
				{
					this._Uncertainty = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestDMAflowResult
	{
		
		private int _DMAId;
		
		private System.DateTimeOffset _Time;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestDMAflowResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DMAId", DbType="Int NOT NULL")]
		public int DMAId
		{
			get
			{
				return this._DMAId;
			}
			set
			{
				if ((this._DMAId != value))
				{
					this._DMAId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this._Time = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestDMApressureResult
	{
		
		private int _DMAId;
		
		private System.DateTimeOffset _Time;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestDMApressureResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DMAId", DbType="Int NOT NULL")]
		public int DMAId
		{
			get
			{
				return this._DMAId;
			}
			set
			{
				if ((this._DMAId != value))
				{
					this._DMAId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this._Time = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestDMAvolumeResult
	{
		
		private int _DMAId;
		
		private System.DateTimeOffset _Time;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestDMAvolumeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DMAId", DbType="Int NOT NULL")]
		public int DMAId
		{
			get
			{
				return this._DMAId;
			}
			set
			{
				if ((this._DMAId != value))
				{
					this._DMAId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this._Time = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherForecastHumidityResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherForecastHumidityResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherForecastPrecipitationResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherForecastPrecipitationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherForecastPressureResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherForecastPressureResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherForecastSolarRadiationResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherForecastSolarRadiationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherForecastTemperatureResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherForecastTemperatureResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherForecastWindDirectionResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private string _Scaled_Regressor;
		
		public FindNearestWeatherForecastWindDirectionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="NVarChar(MAX)")]
		public string Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherForecastWindVelocityResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherForecastWindVelocityResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherHumidityResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherHumidityResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherPrecipitationResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherPrecipitationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherPressureResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherPressureResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherSolarRadiationResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherSolarRadiationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherTemperatureResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Unscaled;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherTemperatureResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unscaled", DbType="Float")]
		public System.Nullable<double> Unscaled
		{
			get
			{
				return this._Unscaled;
			}
			set
			{
				if ((this._Unscaled != value))
				{
					this._Unscaled = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherWindDirectionResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private string _Scaled_Regressor;
		
		public FindNearestWeatherWindDirectionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="NVarChar(MAX)")]
		public string Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
	}
	
	public partial class FindNearestWeatherWindVelocityResult
	{
		
		private int _WeatherStationId;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Scaled_Regressor;
		
		private System.Nullable<double> _Distance;
		
		public FindNearestWeatherWindVelocityResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherStationId", DbType="Int NOT NULL")]
		public int WeatherStationId
		{
			get
			{
				return this._WeatherStationId;
			}
			set
			{
				if ((this._WeatherStationId != value))
				{
					this._WeatherStationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scaled_Regressor", DbType="Float")]
		public System.Nullable<double> Scaled_Regressor
		{
			get
			{
				return this._Scaled_Regressor;
			}
			set
			{
				if ((this._Scaled_Regressor != value))
				{
					this._Scaled_Regressor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class GetDemandPredictionDataResult
	{
		
		private string _Identifier;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private double _Demand;
		
		private System.Nullable<double> _Uncertainty;
		
		private int _GeneratedById;
		
		private System.DateTimeOffset _BaseTime;
		
		private System.DateTimeOffset _CreationTime;
		
		private string _Comment;
		
		private string _Application;
		
		private System.Nullable<long> _rn;
		
		public GetDemandPredictionDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this._Identifier = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Demand", DbType="Float NOT NULL")]
		public double Demand
		{
			get
			{
				return this._Demand;
			}
			set
			{
				if ((this._Demand != value))
				{
					this._Demand = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uncertainty", DbType="Float")]
		public System.Nullable<double> Uncertainty
		{
			get
			{
				return this._Uncertainty;
			}
			set
			{
				if ((this._Uncertainty != value))
				{
					this._Uncertainty = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratedById", DbType="Int NOT NULL")]
		public int GeneratedById
		{
			get
			{
				return this._GeneratedById;
			}
			set
			{
				if ((this._GeneratedById != value))
				{
					this._GeneratedById = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset BaseTime
		{
			get
			{
				return this._BaseTime;
			}
			set
			{
				if ((this._BaseTime != value))
				{
					this._BaseTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this._CreationTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Application
		{
			get
			{
				return this._Application;
			}
			set
			{
				if ((this._Application != value))
				{
					this._Application = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rn", DbType="BigInt")]
		public System.Nullable<long> rn
		{
			get
			{
				return this._rn;
			}
			set
			{
				if ((this._rn != value))
				{
					this._rn = value;
				}
			}
		}
	}
	
	public partial class GetPricingDataResult
	{
		
		private string _Identifier;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.DateTimeOffset _BaseTime;
		
		private decimal _Price;
		
		private System.Nullable<int> _diff;
		
		public GetPricingDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this._Identifier = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this._CreationTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset BaseTime
		{
			get
			{
				return this._BaseTime;
			}
			set
			{
				if ((this._BaseTime != value))
				{
					this._BaseTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diff", DbType="Int")]
		public System.Nullable<int> diff
		{
			get
			{
				return this._diff;
			}
			set
			{
				if ((this._diff != value))
				{
					this._diff = value;
				}
			}
		}
	}
	
	public partial class GetWeatherDataResult
	{
		
		private string _Identifier;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Precipitation;
		
		private System.Nullable<double> _Temperature;
		
		private System.Nullable<int> _Humidity;
		
		private System.Nullable<int> _Pressure;
		
		private System.Nullable<double> _Wind_velocity;
		
		private string _Wind_direction;
		
		private System.Nullable<double> _Solar_radiation;
		
		public GetWeatherDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this._Identifier = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precipitation", DbType="Float")]
		public System.Nullable<double> Precipitation
		{
			get
			{
				return this._Precipitation;
			}
			set
			{
				if ((this._Precipitation != value))
				{
					this._Precipitation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Float")]
		public System.Nullable<double> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this._Temperature = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Int")]
		public System.Nullable<int> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this._Humidity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pressure", DbType="Int")]
		public System.Nullable<int> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this._Pressure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_velocity", DbType="Float")]
		public System.Nullable<double> Wind_velocity
		{
			get
			{
				return this._Wind_velocity;
			}
			set
			{
				if ((this._Wind_velocity != value))
				{
					this._Wind_velocity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_direction", DbType="NVarChar(MAX)")]
		public string Wind_direction
		{
			get
			{
				return this._Wind_direction;
			}
			set
			{
				if ((this._Wind_direction != value))
				{
					this._Wind_direction = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solar_radiation", DbType="Float")]
		public System.Nullable<double> Solar_radiation
		{
			get
			{
				return this._Solar_radiation;
			}
			set
			{
				if ((this._Solar_radiation != value))
				{
					this._Solar_radiation = value;
				}
			}
		}
	}
	
	public partial class GetWeatherPredictionDataResult
	{
		
		private string _Identifier;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Precipitation;
		
		private System.Nullable<double> _Temperature;
		
		private System.Nullable<int> _Humidity;
		
		private System.Nullable<int> _Pressure;
		
		private System.Nullable<double> _Wind_velocity;
		
		private string _Wind_direction;
		
		private System.Nullable<double> _Solar_radiation;
		
		private System.DateTimeOffset _BaseTime;
		
		private System.DateTimeOffset _CreationTime;
		
		private string _Comment;
		
		private string _Application;
		
		private System.Nullable<long> _rn;
		
		public GetWeatherPredictionDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this._Identifier = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precipitation", DbType="Float")]
		public System.Nullable<double> Precipitation
		{
			get
			{
				return this._Precipitation;
			}
			set
			{
				if ((this._Precipitation != value))
				{
					this._Precipitation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Float")]
		public System.Nullable<double> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this._Temperature = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Int")]
		public System.Nullable<int> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this._Humidity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pressure", DbType="Int")]
		public System.Nullable<int> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this._Pressure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_velocity", DbType="Float")]
		public System.Nullable<double> Wind_velocity
		{
			get
			{
				return this._Wind_velocity;
			}
			set
			{
				if ((this._Wind_velocity != value))
				{
					this._Wind_velocity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind_direction", DbType="NVarChar(MAX)")]
		public string Wind_direction
		{
			get
			{
				return this._Wind_direction;
			}
			set
			{
				if ((this._Wind_direction != value))
				{
					this._Wind_direction = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solar_radiation", DbType="Float")]
		public System.Nullable<double> Solar_radiation
		{
			get
			{
				return this._Solar_radiation;
			}
			set
			{
				if ((this._Solar_radiation != value))
				{
					this._Solar_radiation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset BaseTime
		{
			get
			{
				return this._BaseTime;
			}
			set
			{
				if ((this._BaseTime != value))
				{
					this._BaseTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this._CreationTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Application
		{
			get
			{
				return this._Application;
			}
			set
			{
				if ((this._Application != value))
				{
					this._Application = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rn", DbType="BigInt")]
		public System.Nullable<long> rn
		{
			get
			{
				return this._rn;
			}
			set
			{
				if ((this._rn != value))
				{
					this._rn = value;
				}
			}
		}
	}
	
	public partial class GetAvailabilityPredictionDataResult
	{
		
		private string _Identifier;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Contributing_volume;
		
		private int _GeneratedById;
		
		private System.DateTimeOffset _BaseTime;
		
		private System.DateTimeOffset _CreationTime;
		
		public GetAvailabilityPredictionDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX)")]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this._Identifier = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contributing_volume", DbType="Float")]
		public System.Nullable<double> Contributing_volume
		{
			get
			{
				return this._Contributing_volume;
			}
			set
			{
				if ((this._Contributing_volume != value))
				{
					this._Contributing_volume = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratedById", DbType="Int NOT NULL")]
		public int GeneratedById
		{
			get
			{
				return this._GeneratedById;
			}
			set
			{
				if ((this._GeneratedById != value))
				{
					this._GeneratedById = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset BaseTime
		{
			get
			{
				return this._BaseTime;
			}
			set
			{
				if ((this._BaseTime != value))
				{
					this._BaseTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this._CreationTime = value;
				}
			}
		}
	}
	
	public partial class GetDICMSiteResult
	{
		
		private System.Nullable<double> _Volume;
		
		private System.Nullable<double> _Duration;
		
		public GetDICMSiteResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Float")]
		public System.Nullable<double> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Float")]
		public System.Nullable<double> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this._Duration = value;
				}
			}
		}
	}
	
	public partial class GetDMADataResult
	{
		
		private string _Identifier;
		
		private System.DateTimeOffset _Time;
		
		private System.Nullable<double> _Flow;
		
		private System.Nullable<double> _Pressure;
		
		private System.Nullable<double> _Volume;
		
		public GetDMADataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this._Identifier = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this._Time = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flow", DbType="Float")]
		public System.Nullable<double> Flow
		{
			get
			{
				return this._Flow;
			}
			set
			{
				if ((this._Flow != value))
				{
					this._Flow = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pressure", DbType="Float")]
		public System.Nullable<double> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this._Pressure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Float")]
		public System.Nullable<double> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
	}
	
	public partial class GetmeterListResult
	{
		
		private string _MeterIdentity;
		
		public GetmeterListResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterIdentity", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MeterIdentity
		{
			get
			{
				return this._MeterIdentity;
			}
			set
			{
				if ((this._MeterIdentity != value))
				{
					this._MeterIdentity = value;
				}
			}
		}
	}
	
	public partial class GetTankDataResult
	{
		
		private string _Identifier;
		
		private System.DateTimeOffset _From;
		
		private System.DateTimeOffset _To;
		
		private System.Nullable<double> _Volume;
		
		private System.Nullable<double> _Outflow;
		
		private System.Nullable<double> _Inflow;
		
		public GetTankDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this._Identifier = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Float")]
		public System.Nullable<double> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Outflow", DbType="Float")]
		public System.Nullable<double> Outflow
		{
			get
			{
				return this._Outflow;
			}
			set
			{
				if ((this._Outflow != value))
				{
					this._Outflow = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inflow", DbType="Float")]
		public System.Nullable<double> Inflow
		{
			get
			{
				return this._Inflow;
			}
			set
			{
				if ((this._Inflow != value))
				{
					this._Inflow = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
